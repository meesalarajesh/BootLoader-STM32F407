
BootLoader-STM32F407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002bc  0800384c  0800384c  0001384c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b08  08003b08  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003b08  08003b08  00013b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003b10  08003b10  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b10  08003b10  00013b10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b14  08003b14  00013b14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003b18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002804  20000078  08003b90  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000287c  08003b90  0002287c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009119  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001af6  00000000  00000000  000291c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e8  00000000  00000000  0002acb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  0002b4a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00020392  00000000  00000000  0002bbb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00007370  00000000  00000000  0004bf42  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c1aa7  00000000  00000000  000532b2  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00114d59  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021f8  00000000  00000000  00114dd4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003834 	.word	0x08003834

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08003834 	.word	0x08003834

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b086      	sub	sp, #24
 8000584:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000586:	f000 fd07 	bl	8000f98 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800058a:	f000 f957 	bl	800083c <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800058e:	f000 fa27 	bl	80009e0 <MX_GPIO_Init>
	MX_CRC_Init();
 8000592:	f000 f9bd 	bl	8000910 <MX_CRC_Init>
	MX_USART2_UART_Init();
 8000596:	f000 f9cf 	bl	8000938 <MX_USART2_UART_Init>
	MX_USART3_UART_Init();
 800059a:	f000 f9f7 	bl	800098c <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */

	memset(dataArray,0,10000);
 800059e:	f242 7210 	movw	r2, #10000	; 0x2710
 80005a2:	2100      	movs	r1, #0
 80005a4:	4884      	ldr	r0, [pc, #528]	; (80007b8 <main+0x238>)
 80005a6:	f002 fd37 	bl	8003018 <memset>
	printmsg("Press User Button within 3 Seconds to boot into BootLoader Mode\r\n");
 80005aa:	4884      	ldr	r0, [pc, #528]	; (80007bc <main+0x23c>)
 80005ac:	f000 fa86 	bl	8000abc <printmsg>

	printmsg("3\r\n");
 80005b0:	4883      	ldr	r0, [pc, #524]	; (80007c0 <main+0x240>)
 80005b2:	f000 fa83 	bl	8000abc <printmsg>
	HAL_Delay(1000);
 80005b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005ba:	f000 fd5f 	bl	800107c <HAL_Delay>
	printmsg("2\r\n");
 80005be:	4881      	ldr	r0, [pc, #516]	; (80007c4 <main+0x244>)
 80005c0:	f000 fa7c 	bl	8000abc <printmsg>
	HAL_Delay(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f000 fd58 	bl	800107c <HAL_Delay>
	printmsg("1\r\n");
 80005cc:	487e      	ldr	r0, [pc, #504]	; (80007c8 <main+0x248>)
 80005ce:	f000 fa75 	bl	8000abc <printmsg>
	HAL_Delay(1000);
 80005d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005d6:	f000 fd51 	bl	800107c <HAL_Delay>
	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0) == GPIO_PIN_SET)
 80005da:	2101      	movs	r1, #1
 80005dc:	487b      	ldr	r0, [pc, #492]	; (80007cc <main+0x24c>)
 80005de:	f001 fb0b 	bl	8001bf8 <HAL_GPIO_ReadPin>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	f040 80d6 	bne.w	8000796 <main+0x216>
	{
		printmsg("BootLoader Mode\r\n");
 80005ea:	4879      	ldr	r0, [pc, #484]	; (80007d0 <main+0x250>)
 80005ec:	f000 fa66 	bl	8000abc <printmsg>
		uint32_t downloaderKey = calculateAuthenticationKEY(key);
 80005f0:	4b78      	ldr	r3, [pc, #480]	; (80007d4 <main+0x254>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 fafb 	bl	8000bf0 <calculateAuthenticationKEY>
 80005fa:	6178      	str	r0, [r7, #20]
		uartDataTx[0] = key;
 80005fc:	4b75      	ldr	r3, [pc, #468]	; (80007d4 <main+0x254>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a75      	ldr	r2, [pc, #468]	; (80007d8 <main+0x258>)
 8000602:	6013      	str	r3, [r2, #0]
		printmsg("Waiting for Tester Connection\r\n");
 8000604:	4875      	ldr	r0, [pc, #468]	; (80007dc <main+0x25c>)
 8000606:	f000 fa59 	bl	8000abc <printmsg>
		uint32_t temp = 0;
 800060a:	2300      	movs	r3, #0
 800060c:	607b      	str	r3, [r7, #4]
		HAL_UART_Receive(&huart3, &temp, 4, HAL_MAX_DELAY);
 800060e:	1d39      	adds	r1, r7, #4
 8000610:	f04f 33ff 	mov.w	r3, #4294967295
 8000614:	2204      	movs	r2, #4
 8000616:	4872      	ldr	r0, [pc, #456]	; (80007e0 <main+0x260>)
 8000618:	f002 f868 	bl	80026ec <HAL_UART_Receive>
		printmsg("Sending Authentication Key to Tester\r\n");
 800061c:	4871      	ldr	r0, [pc, #452]	; (80007e4 <main+0x264>)
 800061e:	f000 fa4d 	bl	8000abc <printmsg>
		HAL_Delay(500);
 8000622:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000626:	f000 fd29 	bl	800107c <HAL_Delay>
		HAL_UART_Transmit(&huart3, &uartDataTx[0], 4, HAL_MAX_DELAY);
 800062a:	f04f 33ff 	mov.w	r3, #4294967295
 800062e:	2204      	movs	r2, #4
 8000630:	4969      	ldr	r1, [pc, #420]	; (80007d8 <main+0x258>)
 8000632:	486b      	ldr	r0, [pc, #428]	; (80007e0 <main+0x260>)
 8000634:	f001 ffc1 	bl	80025ba <HAL_UART_Transmit>
		printmsg("Waiting for the Tester Key\r\n");
 8000638:	486b      	ldr	r0, [pc, #428]	; (80007e8 <main+0x268>)
 800063a:	f000 fa3f 	bl	8000abc <printmsg>
		HAL_UART_Receive(&huart3, &uartDataRx[0], 4, HAL_MAX_DELAY);
 800063e:	f04f 33ff 	mov.w	r3, #4294967295
 8000642:	2204      	movs	r2, #4
 8000644:	4969      	ldr	r1, [pc, #420]	; (80007ec <main+0x26c>)
 8000646:	4866      	ldr	r0, [pc, #408]	; (80007e0 <main+0x260>)
 8000648:	f002 f850 	bl	80026ec <HAL_UART_Receive>
		if(uartDataRx[0] == downloaderKey)
 800064c:	4b67      	ldr	r3, [pc, #412]	; (80007ec <main+0x26c>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	697a      	ldr	r2, [r7, #20]
 8000652:	429a      	cmp	r2, r3
 8000654:	f040 8092 	bne.w	800077c <main+0x1fc>
		{
			printmsg("Tester is verified successfully\r\n");
 8000658:	4865      	ldr	r0, [pc, #404]	; (80007f0 <main+0x270>)
 800065a:	f000 fa2f 	bl	8000abc <printmsg>
			uartDataTx[1] = 0xFFFFFFFF;
 800065e:	4b5e      	ldr	r3, [pc, #376]	; (80007d8 <main+0x258>)
 8000660:	f04f 32ff 	mov.w	r2, #4294967295
 8000664:	605a      	str	r2, [r3, #4]
			HAL_Delay(1000);
 8000666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066a:	f000 fd07 	bl	800107c <HAL_Delay>
			HAL_UART_Transmit(&huart3, &uartDataTx[1], 4, HAL_MAX_DELAY);
 800066e:	f04f 33ff 	mov.w	r3, #4294967295
 8000672:	2204      	movs	r2, #4
 8000674:	495f      	ldr	r1, [pc, #380]	; (80007f4 <main+0x274>)
 8000676:	485a      	ldr	r0, [pc, #360]	; (80007e0 <main+0x260>)
 8000678:	f001 ff9f 	bl	80025ba <HAL_UART_Transmit>
			printmsg("Verification msg sent\r\n");
 800067c:	485e      	ldr	r0, [pc, #376]	; (80007f8 <main+0x278>)
 800067e:	f000 fa1d 	bl	8000abc <printmsg>
			HAL_UART_Receive(&huart3, &uartDataRx[1], 8, HAL_MAX_DELAY);
 8000682:	f04f 33ff 	mov.w	r3, #4294967295
 8000686:	2208      	movs	r2, #8
 8000688:	495c      	ldr	r1, [pc, #368]	; (80007fc <main+0x27c>)
 800068a:	4855      	ldr	r0, [pc, #340]	; (80007e0 <main+0x260>)
 800068c:	f002 f82e 	bl	80026ec <HAL_UART_Receive>
			uint32_t payloadCRC = uartDataRx[1];
 8000690:	4b56      	ldr	r3, [pc, #344]	; (80007ec <main+0x26c>)
 8000692:	685b      	ldr	r3, [r3, #4]
 8000694:	613b      	str	r3, [r7, #16]
			payloadLen = uartDataRx[2];
 8000696:	4b55      	ldr	r3, [pc, #340]	; (80007ec <main+0x26c>)
 8000698:	689b      	ldr	r3, [r3, #8]
 800069a:	4a59      	ldr	r2, [pc, #356]	; (8000800 <main+0x280>)
 800069c:	6013      	str	r3, [r2, #0]

			printmsg("CRC value and Payload Length received\r\n");
 800069e:	4859      	ldr	r0, [pc, #356]	; (8000804 <main+0x284>)
 80006a0:	f000 fa0c 	bl	8000abc <printmsg>

			printmsg("Waiting for the payload\r\n");
 80006a4:	4858      	ldr	r0, [pc, #352]	; (8000808 <main+0x288>)
 80006a6:	f000 fa09 	bl	8000abc <printmsg>

			HAL_UART_Receive(&huart3, dataArray, payloadLen, HAL_MAX_DELAY);
 80006aa:	4b55      	ldr	r3, [pc, #340]	; (8000800 <main+0x280>)
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	b29a      	uxth	r2, r3
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	4940      	ldr	r1, [pc, #256]	; (80007b8 <main+0x238>)
 80006b6:	484a      	ldr	r0, [pc, #296]	; (80007e0 <main+0x260>)
 80006b8:	f002 f818 	bl	80026ec <HAL_UART_Receive>

			uint32_t crc_Value = HAL_CRC_Accumulate(&hcrc, &dataArray, payloadLen);
 80006bc:	4b50      	ldr	r3, [pc, #320]	; (8000800 <main+0x280>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	493d      	ldr	r1, [pc, #244]	; (80007b8 <main+0x238>)
 80006c4:	4851      	ldr	r0, [pc, #324]	; (800080c <main+0x28c>)
 80006c6:	f000 fdfc 	bl	80012c2 <HAL_CRC_Accumulate>
 80006ca:	60f8      	str	r0, [r7, #12]

			if(!(bootloader_verify_crc(&dataArray, payloadLen, payloadCRC)))
 80006cc:	4b4c      	ldr	r3, [pc, #304]	; (8000800 <main+0x280>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	693a      	ldr	r2, [r7, #16]
 80006d2:	4619      	mov	r1, r3
 80006d4:	4838      	ldr	r0, [pc, #224]	; (80007b8 <main+0x238>)
 80006d6:	f000 fa9d 	bl	8000c14 <bootloader_verify_crc>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d140      	bne.n	8000762 <main+0x1e2>
			{

				printmsg("CRC is matched\r\n");
 80006e0:	484b      	ldr	r0, [pc, #300]	; (8000810 <main+0x290>)
 80006e2:	f000 f9eb 	bl	8000abc <printmsg>

				printmsg("Data is being written\r\n");
 80006e6:	484b      	ldr	r0, [pc, #300]	; (8000814 <main+0x294>)
 80006e8:	f000 f9e8 	bl	8000abc <printmsg>

				uint8_t statusWrite = 0;
 80006ec:	2300      	movs	r3, #0
 80006ee:	72fb      	strb	r3, [r7, #11]

				uint8_t statusErase = 0;
 80006f0:	2300      	movs	r3, #0
 80006f2:	72bb      	strb	r3, [r7, #10]

				statusErase = execute_flash_erase(6, 1);
 80006f4:	2101      	movs	r1, #1
 80006f6:	2006      	movs	r0, #6
 80006f8:	f000 fa32 	bl	8000b60 <execute_flash_erase>
 80006fc:	4603      	mov	r3, r0
 80006fe:	72bb      	strb	r3, [r7, #10]

				statusWrite = execute_mem_write(dataArray, pBuffer, payloadLen);
 8000700:	4b45      	ldr	r3, [pc, #276]	; (8000818 <main+0x298>)
 8000702:	6819      	ldr	r1, [r3, #0]
 8000704:	4b3e      	ldr	r3, [pc, #248]	; (8000800 <main+0x280>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	482b      	ldr	r0, [pc, #172]	; (80007b8 <main+0x238>)
 800070c:	f000 f9fc 	bl	8000b08 <execute_mem_write>
 8000710:	4603      	mov	r3, r0
 8000712:	72fb      	strb	r3, [r7, #11]
				if(statusWrite == HAL_OK)
 8000714:	7afb      	ldrb	r3, [r7, #11]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d112      	bne.n	8000740 <main+0x1c0>
				{
					printmsg("data is written successfully\r\n");
 800071a:	4840      	ldr	r0, [pc, #256]	; (800081c <main+0x29c>)
 800071c:	f000 f9ce 	bl	8000abc <printmsg>
					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_13, GPIO_PIN_SET);
 8000720:	2201      	movs	r2, #1
 8000722:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000726:	483e      	ldr	r0, [pc, #248]	; (8000820 <main+0x2a0>)
 8000728:	f001 fa7e 	bl	8001c28 <HAL_GPIO_WritePin>
					printmsg("Booting into User Application\r\n");
 800072c:	483d      	ldr	r0, [pc, #244]	; (8000824 <main+0x2a4>)
 800072e:	f000 f9c5 	bl	8000abc <printmsg>
					HAL_Delay(500);
 8000732:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000736:	f000 fca1 	bl	800107c <HAL_Delay>
					userApplication();
 800073a:	f000 fa9f 	bl	8000c7c <userApplication>
 800073e:	e036      	b.n	80007ae <main+0x22e>
				}
				else
				{
					printmsg("Data writing is failed\r\n");
 8000740:	4839      	ldr	r0, [pc, #228]	; (8000828 <main+0x2a8>)
 8000742:	f000 f9bb 	bl	8000abc <printmsg>
					HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 8000746:	2201      	movs	r2, #1
 8000748:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800074c:	4834      	ldr	r0, [pc, #208]	; (8000820 <main+0x2a0>)
 800074e:	f001 fa6b 	bl	8001c28 <HAL_GPIO_WritePin>
					printmsg("Data is Erased, Please Go to Bootloader Mode and Download the firmware\r\n");
 8000752:	4836      	ldr	r0, [pc, #216]	; (800082c <main+0x2ac>)
 8000754:	f000 f9b2 	bl	8000abc <printmsg>
					HAL_Delay(500);
 8000758:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800075c:	f000 fc8e 	bl	800107c <HAL_Delay>
 8000760:	e025      	b.n	80007ae <main+0x22e>
				}
			}
			else
			{
				printmsg("CRC is mis-matched\r\n");
 8000762:	4833      	ldr	r0, [pc, #204]	; (8000830 <main+0x2b0>)
 8000764:	f000 f9aa 	bl	8000abc <printmsg>
				HAL_Delay(500);
 8000768:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800076c:	f000 fc86 	bl	800107c <HAL_Delay>
				printmsg("Booting into User Application\r\n");
 8000770:	482c      	ldr	r0, [pc, #176]	; (8000824 <main+0x2a4>)
 8000772:	f000 f9a3 	bl	8000abc <printmsg>
				userApplication();
 8000776:	f000 fa81 	bl	8000c7c <userApplication>
 800077a:	e018      	b.n	80007ae <main+0x22e>
			}

		}
		else
		{
			printmsg("Unknown Tester Found\r\n");
 800077c:	482d      	ldr	r0, [pc, #180]	; (8000834 <main+0x2b4>)
 800077e:	f000 f99d 	bl	8000abc <printmsg>
			HAL_Delay(500);
 8000782:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000786:	f000 fc79 	bl	800107c <HAL_Delay>
			printmsg("Booting into User Application\r\n");
 800078a:	4826      	ldr	r0, [pc, #152]	; (8000824 <main+0x2a4>)
 800078c:	f000 f996 	bl	8000abc <printmsg>
			userApplication();
 8000790:	f000 fa74 	bl	8000c7c <userApplication>
 8000794:	e00b      	b.n	80007ae <main+0x22e>

		}
	}
	else
	{
		printmsg("User Button is not Pressed\r\n");
 8000796:	4828      	ldr	r0, [pc, #160]	; (8000838 <main+0x2b8>)
 8000798:	f000 f990 	bl	8000abc <printmsg>
		printmsg("Booting into User Application\r\n");
 800079c:	4821      	ldr	r0, [pc, #132]	; (8000824 <main+0x2a4>)
 800079e:	f000 f98d 	bl	8000abc <printmsg>
		HAL_Delay(500);
 80007a2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007a6:	f000 fc69 	bl	800107c <HAL_Delay>
		userApplication();
 80007aa:	f000 fa67 	bl	8000c7c <userApplication>
 80007ae:	2300      	movs	r3, #0
	}
	/* USER CODE END 3 */
}
 80007b0:	4618      	mov	r0, r3
 80007b2:	3718      	adds	r7, #24
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000fc 	.word	0x200000fc
 80007bc:	0800384c 	.word	0x0800384c
 80007c0:	08003890 	.word	0x08003890
 80007c4:	08003894 	.word	0x08003894
 80007c8:	08003898 	.word	0x08003898
 80007cc:	40020000 	.word	0x40020000
 80007d0:	0800389c 	.word	0x0800389c
 80007d4:	20000004 	.word	0x20000004
 80007d8:	200000a0 	.word	0x200000a0
 80007dc:	080038b0 	.word	0x080038b0
 80007e0:	200000bc 	.word	0x200000bc
 80007e4:	080038d0 	.word	0x080038d0
 80007e8:	080038f8 	.word	0x080038f8
 80007ec:	20000094 	.word	0x20000094
 80007f0:	08003918 	.word	0x08003918
 80007f4:	200000a4 	.word	0x200000a4
 80007f8:	0800393c 	.word	0x0800393c
 80007fc:	20000098 	.word	0x20000098
 8000800:	200000ac 	.word	0x200000ac
 8000804:	08003954 	.word	0x08003954
 8000808:	0800397c 	.word	0x0800397c
 800080c:	2000280c 	.word	0x2000280c
 8000810:	08003998 	.word	0x08003998
 8000814:	080039ac 	.word	0x080039ac
 8000818:	20000000 	.word	0x20000000
 800081c:	080039c4 	.word	0x080039c4
 8000820:	40021800 	.word	0x40021800
 8000824:	080039e4 	.word	0x080039e4
 8000828:	08003a04 	.word	0x08003a04
 800082c:	08003a20 	.word	0x08003a20
 8000830:	08003a6c 	.word	0x08003a6c
 8000834:	08003a84 	.word	0x08003a84
 8000838:	08003a9c 	.word	0x08003a9c

0800083c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b094      	sub	sp, #80	; 0x50
 8000840:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	f107 0320 	add.w	r3, r7, #32
 8000846:	2230      	movs	r2, #48	; 0x30
 8000848:	2100      	movs	r1, #0
 800084a:	4618      	mov	r0, r3
 800084c:	f002 fbe4 	bl	8003018 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000850:	f107 030c 	add.w	r3, r7, #12
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	60bb      	str	r3, [r7, #8]
 8000864:	4b28      	ldr	r3, [pc, #160]	; (8000908 <SystemClock_Config+0xcc>)
 8000866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000868:	4a27      	ldr	r2, [pc, #156]	; (8000908 <SystemClock_Config+0xcc>)
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	6413      	str	r3, [r2, #64]	; 0x40
 8000870:	4b25      	ldr	r3, [pc, #148]	; (8000908 <SystemClock_Config+0xcc>)
 8000872:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000874:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800087c:	2300      	movs	r3, #0
 800087e:	607b      	str	r3, [r7, #4]
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <SystemClock_Config+0xd0>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a21      	ldr	r2, [pc, #132]	; (800090c <SystemClock_Config+0xd0>)
 8000886:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800088a:	6013      	str	r3, [r2, #0]
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <SystemClock_Config+0xd0>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000894:	607b      	str	r3, [r7, #4]
 8000896:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000898:	2301      	movs	r3, #1
 800089a:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800089c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008a2:	2302      	movs	r3, #2
 80008a4:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80008aa:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80008ac:	2308      	movs	r3, #8
 80008ae:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 336;
 80008b0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80008b4:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008b6:	2302      	movs	r3, #2
 80008b8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80008ba:	2307      	movs	r3, #7
 80008bc:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008be:	f107 0320 	add.w	r3, r7, #32
 80008c2:	4618      	mov	r0, r3
 80008c4:	f001 f9ca 	bl	8001c5c <HAL_RCC_OscConfig>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d001      	beq.n	80008d2 <SystemClock_Config+0x96>
	{
		Error_Handler();
 80008ce:	f000 f9ef 	bl	8000cb0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008d2:	230f      	movs	r3, #15
 80008d4:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008d6:	2302      	movs	r3, #2
 80008d8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008da:	2300      	movs	r3, #0
 80008dc:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008e2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e8:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	2105      	movs	r1, #5
 80008f0:	4618      	mov	r0, r3
 80008f2:	f001 fc23 	bl	800213c <HAL_RCC_ClockConfig>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <SystemClock_Config+0xc4>
	{
		Error_Handler();
 80008fc:	f000 f9d8 	bl	8000cb0 <Error_Handler>
	}
}
 8000900:	bf00      	nop
 8000902:	3750      	adds	r7, #80	; 0x50
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	40023800 	.word	0x40023800
 800090c:	40007000 	.word	0x40007000

08000910 <MX_CRC_Init>:
 * @brief CRC Initialization Function
 * @param None
 * @retval None
 */
static void MX_CRC_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
	/* USER CODE END CRC_Init 0 */

	/* USER CODE BEGIN CRC_Init 1 */

	/* USER CODE END CRC_Init 1 */
	hcrc.Instance = CRC;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_CRC_Init+0x20>)
 8000916:	4a07      	ldr	r2, [pc, #28]	; (8000934 <MX_CRC_Init+0x24>)
 8000918:	601a      	str	r2, [r3, #0]
	if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_CRC_Init+0x20>)
 800091c:	f000 fcb5 	bl	800128a <HAL_CRC_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_CRC_Init+0x1a>
	{
		Error_Handler();
 8000926:	f000 f9c3 	bl	8000cb0 <Error_Handler>
	}
	/* USER CODE BEGIN CRC_Init 2 */

	/* USER CODE END CRC_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	2000280c 	.word	0x2000280c
 8000934:	40023000 	.word	0x40023000

08000938 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800093e:	4a12      	ldr	r2, [pc, #72]	; (8000988 <MX_USART2_UART_Init+0x50>)
 8000940:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b0c      	ldr	r3, [pc, #48]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b08      	ldr	r3, [pc, #32]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b06      	ldr	r3, [pc, #24]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800096e:	4805      	ldr	r0, [pc, #20]	; (8000984 <MX_USART2_UART_Init+0x4c>)
 8000970:	f001 fdd6 	bl	8002520 <HAL_UART_Init>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 800097a:	f000 f999 	bl	8000cb0 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800097e:	bf00      	nop
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20002814 	.word	0x20002814
 8000988:	40004400 	.word	0x40004400

0800098c <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000992:	4a12      	ldr	r2, [pc, #72]	; (80009dc <MX_USART3_UART_Init+0x50>)
 8000994:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000996:	4b10      	ldr	r3, [pc, #64]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 8000998:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800099c:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b2:	220c      	movs	r2, #12
 80009b4:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009be:	2200      	movs	r2, #0
 80009c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_USART3_UART_Init+0x4c>)
 80009c4:	f001 fdac 	bl	8002520 <HAL_UART_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 80009ce:	f000 f96f 	bl	8000cb0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000bc 	.word	0x200000bc
 80009dc:	40004800 	.word	0x40004800

080009e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b08a      	sub	sp, #40	; 0x28
 80009e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e6:	f107 0314 	add.w	r3, r7, #20
 80009ea:	2200      	movs	r2, #0
 80009ec:	601a      	str	r2, [r3, #0]
 80009ee:	605a      	str	r2, [r3, #4]
 80009f0:	609a      	str	r2, [r3, #8]
 80009f2:	60da      	str	r2, [r3, #12]
 80009f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	613b      	str	r3, [r7, #16]
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a04:	6313      	str	r3, [r2, #48]	; 0x30
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a0e:	613b      	str	r3, [r7, #16]
 8000a10:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
 8000a16:	4b26      	ldr	r3, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	4a25      	ldr	r2, [pc, #148]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a1c:	f043 0301 	orr.w	r3, r3, #1
 8000a20:	6313      	str	r3, [r2, #48]	; 0x30
 8000a22:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	60fb      	str	r3, [r7, #12]
 8000a2c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000a2e:	2300      	movs	r3, #0
 8000a30:	60bb      	str	r3, [r7, #8]
 8000a32:	4b1f      	ldr	r3, [pc, #124]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	4a1e      	ldr	r2, [pc, #120]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a38:	f043 0302 	orr.w	r3, r3, #2
 8000a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a3e:	4b1c      	ldr	r3, [pc, #112]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	f003 0302 	and.w	r3, r3, #2
 8000a46:	60bb      	str	r3, [r7, #8]
 8000a48:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	4a17      	ldr	r2, [pc, #92]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a54:	f043 0308 	orr.w	r3, r3, #8
 8000a58:	6313      	str	r3, [r2, #48]	; 0x30
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <MX_GPIO_Init+0xd0>)
 8000a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a5e:	f003 0308 	and.w	r3, r3, #8
 8000a62:	607b      	str	r3, [r7, #4]
 8000a64:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000a6e:	f001 f8db 	bl	8001c28 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PA0 */
	GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a72:	2301      	movs	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	480c      	ldr	r0, [pc, #48]	; (8000ab8 <MX_GPIO_Init+0xd8>)
 8000a86:	f000 ff1d 	bl	80018c4 <HAL_GPIO_Init>

	/*Configure GPIO pins : PD12 PD13 PD14 PD15 */
	GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000a8a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000a8e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_GPIO_Init+0xd4>)
 8000aa4:	f000 ff0e 	bl	80018c4 <HAL_GPIO_Init>

}
 8000aa8:	bf00      	nop
 8000aaa:	3728      	adds	r7, #40	; 0x28
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40023800 	.word	0x40023800
 8000ab4:	40020c00 	.word	0x40020c00
 8000ab8:	40020000 	.word	0x40020000

08000abc <printmsg>:

/* USER CODE BEGIN 4 */
/* prints formatted string to console over UART */
void printmsg(char *format,...)
{
 8000abc:	b40f      	push	{r0, r1, r2, r3}
 8000abe:	b580      	push	{r7, lr}
 8000ac0:	b096      	sub	sp, #88	; 0x58
 8000ac2:	af00      	add	r7, sp, #0
#ifdef BL_DEBUG_MSG_EN
	char str[80];
	/*Extract the the argument list using VA apis */
	va_list args;
	va_start(args, format);
 8000ac4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac8:	607b      	str	r3, [r7, #4]
	vsprintf(str, format,args);
 8000aca:	f107 0308 	add.w	r3, r7, #8
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f002 fabe 	bl	8003054 <vsiprintf>
	HAL_UART_Transmit(D_UART,(uint8_t *)str, strlen(str),HAL_MAX_DELAY);
 8000ad8:	f107 0308 	add.w	r3, r7, #8
 8000adc:	4618      	mov	r0, r3
 8000ade:	f7ff fb77 	bl	80001d0 <strlen>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	f107 0108 	add.w	r1, r7, #8
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295
 8000aee:	4805      	ldr	r0, [pc, #20]	; (8000b04 <printmsg+0x48>)
 8000af0:	f001 fd63 	bl	80025ba <HAL_UART_Transmit>
	va_end(args);
#endif
}
 8000af4:	bf00      	nop
 8000af6:	3758      	adds	r7, #88	; 0x58
 8000af8:	46bd      	mov	sp, r7
 8000afa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000afe:	b004      	add	sp, #16
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20002814 	.word	0x20002814

08000b08 <execute_mem_write>:
uint32_t bytes_to_word(uint32_t *dest, uint8_t *src)
{
	memcpy(dest, &src, sizeof(dest));
}
uint8_t execute_mem_write(uint8_t *pBuffer, uint32_t mem_address, uint32_t len)
{
 8000b08:	b590      	push	{r4, r7, lr}
 8000b0a:	b087      	sub	sp, #28
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	60f8      	str	r0, [r7, #12]
 8000b10:	60b9      	str	r1, [r7, #8]
 8000b12:	607a      	str	r2, [r7, #4]
	uint8_t status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	75fb      	strb	r3, [r7, #23]

	//We have to unlock flash module to get control of registers
	HAL_FLASH_Unlock();
 8000b18:	f000 fc52 	bl	80013c0 <HAL_FLASH_Unlock>

	for(uint32_t i = 0 ; i <len ; i++)
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
 8000b20:	e013      	b.n	8000b4a <execute_mem_write+0x42>
	{
		//Here we program the flash byte by byte
		status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE,mem_address+i,pBuffer[i] );
 8000b22:	68ba      	ldr	r2, [r7, #8]
 8000b24:	693b      	ldr	r3, [r7, #16]
 8000b26:	18d1      	adds	r1, r2, r3
 8000b28:	68fa      	ldr	r2, [r7, #12]
 8000b2a:	693b      	ldr	r3, [r7, #16]
 8000b2c:	4413      	add	r3, r2
 8000b2e:	781b      	ldrb	r3, [r3, #0]
 8000b30:	b2db      	uxtb	r3, r3
 8000b32:	f04f 0400 	mov.w	r4, #0
 8000b36:	461a      	mov	r2, r3
 8000b38:	4623      	mov	r3, r4
 8000b3a:	2000      	movs	r0, #0
 8000b3c:	f000 fbec 	bl	8001318 <HAL_FLASH_Program>
 8000b40:	4603      	mov	r3, r0
 8000b42:	75fb      	strb	r3, [r7, #23]
	for(uint32_t i = 0 ; i <len ; i++)
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	3301      	adds	r3, #1
 8000b48:	613b      	str	r3, [r7, #16]
 8000b4a:	693a      	ldr	r2, [r7, #16]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	429a      	cmp	r2, r3
 8000b50:	d3e7      	bcc.n	8000b22 <execute_mem_write+0x1a>
	}
	HAL_FLASH_Lock();
 8000b52:	f000 fc57 	bl	8001404 <HAL_FLASH_Lock>

	return status;
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	371c      	adds	r7, #28
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd90      	pop	{r4, r7, pc}

08000b60 <execute_flash_erase>:

uint8_t execute_flash_erase(uint8_t sector_number , uint8_t number_of_sector)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08a      	sub	sp, #40	; 0x28
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	4603      	mov	r3, r0
 8000b68:	460a      	mov	r2, r1
 8000b6a:	71fb      	strb	r3, [r7, #7]
 8000b6c:	4613      	mov	r3, r2
 8000b6e:	71bb      	strb	r3, [r7, #6]
	FLASH_EraseInitTypeDef flashErase_handle;
	uint32_t sectorError;
	HAL_StatusTypeDef status;


	if( number_of_sector > 12 )
 8000b70:	79bb      	ldrb	r3, [r7, #6]
 8000b72:	2b0c      	cmp	r3, #12
 8000b74:	d901      	bls.n	8000b7a <execute_flash_erase+0x1a>
		return INVALID_SECTOR;
 8000b76:	2304      	movs	r3, #4
 8000b78:	e035      	b.n	8000be6 <execute_flash_erase+0x86>

	if( (sector_number == 0xff ) || (sector_number <= 11) )
 8000b7a:	79fb      	ldrb	r3, [r7, #7]
 8000b7c:	2bff      	cmp	r3, #255	; 0xff
 8000b7e:	d002      	beq.n	8000b86 <execute_flash_erase+0x26>
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b0b      	cmp	r3, #11
 8000b84:	d82e      	bhi.n	8000be4 <execute_flash_erase+0x84>
	{
		if(sector_number == (uint8_t) 0xff)
 8000b86:	79fb      	ldrb	r3, [r7, #7]
 8000b88:	2bff      	cmp	r3, #255	; 0xff
 8000b8a:	d102      	bne.n	8000b92 <execute_flash_erase+0x32>
		{
			flashErase_handle.TypeErase = FLASH_TYPEERASE_MASSERASE;
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	e012      	b.n	8000bb8 <execute_flash_erase+0x58>
		}else
		{
			/*Here we are just calculating how many sectors needs to erased */
			uint8_t remanining_sector = 12 - sector_number;
 8000b92:	79fb      	ldrb	r3, [r7, #7]
 8000b94:	f1c3 030c 	rsb	r3, r3, #12
 8000b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if( number_of_sector > remanining_sector)
 8000b9c:	79ba      	ldrb	r2, [r7, #6]
 8000b9e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d902      	bls.n	8000bac <execute_flash_erase+0x4c>
			{
				number_of_sector = remanining_sector;
 8000ba6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000baa:	71bb      	strb	r3, [r7, #6]
			}
			flashErase_handle.TypeErase = FLASH_TYPEERASE_SECTORS;
 8000bac:	2300      	movs	r3, #0
 8000bae:	613b      	str	r3, [r7, #16]
			flashErase_handle.Sector = sector_number; // this is the initial sector
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	61bb      	str	r3, [r7, #24]
			flashErase_handle.NbSectors = number_of_sector;
 8000bb4:	79bb      	ldrb	r3, [r7, #6]
 8000bb6:	61fb      	str	r3, [r7, #28]
		}
		flashErase_handle.Banks = FLASH_BANK_1;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	617b      	str	r3, [r7, #20]

		/*Get access to touch the flash registers */
		HAL_FLASH_Unlock();
 8000bbc:	f000 fc00 	bl	80013c0 <HAL_FLASH_Unlock>
		flashErase_handle.VoltageRange = FLASH_VOLTAGE_RANGE_3;  // our mcu will work on this voltage range
 8000bc0:	2302      	movs	r3, #2
 8000bc2:	623b      	str	r3, [r7, #32]
		status = (uint8_t) HAL_FLASHEx_Erase(&flashErase_handle, &sectorError);
 8000bc4:	f107 020c 	add.w	r2, r7, #12
 8000bc8:	f107 0310 	add.w	r3, r7, #16
 8000bcc:	4611      	mov	r1, r2
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f000 fd56 	bl	8001680 <HAL_FLASHEx_Erase>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		HAL_FLASH_Lock();
 8000bda:	f000 fc13 	bl	8001404 <HAL_FLASH_Lock>

		return status;
 8000bde:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000be2:	e000      	b.n	8000be6 <execute_flash_erase+0x86>
	}


	return INVALID_SECTOR;
 8000be4:	2304      	movs	r3, #4
}
 8000be6:	4618      	mov	r0, r3
 8000be8:	3728      	adds	r7, #40	; 0x28
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}
	...

08000bf0 <calculateAuthenticationKEY>:
uint32_t calculateAuthenticationKEY(uint32_t key)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
	uint32_t returnValue = key ^ 0xAABBCCDD;
 8000bf8:	687a      	ldr	r2, [r7, #4]
 8000bfa:	4b05      	ldr	r3, [pc, #20]	; (8000c10 <calculateAuthenticationKEY+0x20>)
 8000bfc:	4053      	eors	r3, r2
 8000bfe:	60fb      	str	r3, [r7, #12]
	return returnValue;
 8000c00:	68fb      	ldr	r3, [r7, #12]

}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3714      	adds	r7, #20
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	aabbccdd 	.word	0xaabbccdd

08000c14 <bootloader_verify_crc>:
uint8_t bootloader_verify_crc (uint8_t *pData, uint32_t len, uint32_t crc_host)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b088      	sub	sp, #32
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	60f8      	str	r0, [r7, #12]
 8000c1c:	60b9      	str	r1, [r7, #8]
 8000c1e:	607a      	str	r2, [r7, #4]
	uint32_t uwCRCValue = 0xFF;
 8000c20:	23ff      	movs	r3, #255	; 0xff
 8000c22:	61fb      	str	r3, [r7, #28]

	for (uint32_t i=0 ; i < len ; i++)
 8000c24:	2300      	movs	r3, #0
 8000c26:	61bb      	str	r3, [r7, #24]
 8000c28:	e00f      	b.n	8000c4a <bootloader_verify_crc+0x36>
	{
		uint32_t i_data = pData[i];
 8000c2a:	68fa      	ldr	r2, [r7, #12]
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	4413      	add	r3, r2
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	617b      	str	r3, [r7, #20]
		uwCRCValue = HAL_CRC_Accumulate(&hcrc, &i_data, 1);
 8000c34:	f107 0314 	add.w	r3, r7, #20
 8000c38:	2201      	movs	r2, #1
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	480e      	ldr	r0, [pc, #56]	; (8000c78 <bootloader_verify_crc+0x64>)
 8000c3e:	f000 fb40 	bl	80012c2 <HAL_CRC_Accumulate>
 8000c42:	61f8      	str	r0, [r7, #28]
	for (uint32_t i=0 ; i < len ; i++)
 8000c44:	69bb      	ldr	r3, [r7, #24]
 8000c46:	3301      	adds	r3, #1
 8000c48:	61bb      	str	r3, [r7, #24]
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	d3eb      	bcc.n	8000c2a <bootloader_verify_crc+0x16>
	}

	/* Reset CRC Calculation Unit */
	__HAL_CRC_DR_RESET(&hcrc);
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <bootloader_verify_crc+0x64>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	689a      	ldr	r2, [r3, #8]
 8000c58:	4b07      	ldr	r3, [pc, #28]	; (8000c78 <bootloader_verify_crc+0x64>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f042 0201 	orr.w	r2, r2, #1
 8000c60:	609a      	str	r2, [r3, #8]

	if( uwCRCValue == crc_host)
 8000c62:	69fa      	ldr	r2, [r7, #28]
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	429a      	cmp	r2, r3
 8000c68:	d101      	bne.n	8000c6e <bootloader_verify_crc+0x5a>
	{
		return VERIFY_CRC_SUCCESS;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	e000      	b.n	8000c70 <bootloader_verify_crc+0x5c>
	}

	return VERIFY_CRC_FAIL;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	2000280c 	.word	0x2000280c

08000c7c <userApplication>:
void userApplication(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

	//printmsg("BL_DEBUG_MSG:bootloader_jump_to_user_app\n");


	// 1. configure the MSP by reading the value from the base address of the sector 2
	uint32_t msp_value = *(volatile uint32_t *)FLASH_SECTOR6_BASE_ADDRESS;
 8000c82:	4b09      	ldr	r3, [pc, #36]	; (8000ca8 <userApplication+0x2c>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
 8000c8a:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	f383 8808 	msr	MSP, r3
	//SCB->VTOR = FLASH_SECTOR1_BASE_ADDRESS;

	/* 2. Now fetch the reset handler address of the user application
	 * from the location FLASH_SECTOR2_BASE_ADDRESS+4
	 */
	uint32_t resethandler_address = *(volatile uint32_t *) (FLASH_SECTOR6_BASE_ADDRESS + 4);
 8000c92:	4b06      	ldr	r3, [pc, #24]	; (8000cac <userApplication+0x30>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	60bb      	str	r3, [r7, #8]

	app_reset_handler = (void*) resethandler_address;
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	607b      	str	r3, [r7, #4]

	//printmsg("BL_DEBUG_MSG: app reset handler addr : %#x\n",app_reset_handler);

	//3. jump to reset handler of the user application
	app_reset_handler();
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	4798      	blx	r3

}
 8000ca0:	bf00      	nop
 8000ca2:	3710      	adds	r7, #16
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	08040000 	.word	0x08040000
 8000cac:	08040004 	.word	0x08040004

08000cb0 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

	/* USER CODE END Error_Handler_Debug */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
	...

08000cc0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ccc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd4:	6453      	str	r3, [r2, #68]	; 0x44
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	4b09      	ldr	r3, [pc, #36]	; (8000d0c <HAL_MspInit+0x4c>)
 8000ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cea:	4a08      	ldr	r2, [pc, #32]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cf2:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <HAL_MspInit+0x4c>)
 8000cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cfa:	603b      	str	r3, [r7, #0]
 8000cfc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cfe:	2007      	movs	r0, #7
 8000d00:	f000 fa90 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d04:	bf00      	nop
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	40023800 	.word	0x40023800

08000d10 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b085      	sub	sp, #20
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <HAL_CRC_MspInit+0x3c>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d10d      	bne.n	8000d3e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	60fb      	str	r3, [r7, #12]
 8000d26:	4b0a      	ldr	r3, [pc, #40]	; (8000d50 <HAL_CRC_MspInit+0x40>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a09      	ldr	r2, [pc, #36]	; (8000d50 <HAL_CRC_MspInit+0x40>)
 8000d2c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b07      	ldr	r3, [pc, #28]	; (8000d50 <HAL_CRC_MspInit+0x40>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000d3a:	60fb      	str	r3, [r7, #12]
 8000d3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8000d3e:	bf00      	nop
 8000d40:	3714      	adds	r7, #20
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
 8000d4a:	bf00      	nop
 8000d4c:	40023000 	.word	0x40023000
 8000d50:	40023800 	.word	0x40023800

08000d54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08c      	sub	sp, #48	; 0x30
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 031c 	add.w	r3, r7, #28
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a32      	ldr	r2, [pc, #200]	; (8000e3c <HAL_UART_MspInit+0xe8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d12c      	bne.n	8000dd0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	61bb      	str	r3, [r7, #24]
 8000d7a:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	4a30      	ldr	r2, [pc, #192]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d84:	6413      	str	r3, [r2, #64]	; 0x40
 8000d86:	4b2e      	ldr	r3, [pc, #184]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d8e:	61bb      	str	r3, [r7, #24]
 8000d90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
 8000d96:	4b2a      	ldr	r3, [pc, #168]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a29      	ldr	r2, [pc, #164]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b27      	ldr	r3, [pc, #156]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dae:	230c      	movs	r3, #12
 8000db0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db2:	2302      	movs	r3, #2
 8000db4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dba:	2303      	movs	r3, #3
 8000dbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dbe:	2307      	movs	r3, #7
 8000dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc2:	f107 031c 	add.w	r3, r7, #28
 8000dc6:	4619      	mov	r1, r3
 8000dc8:	481e      	ldr	r0, [pc, #120]	; (8000e44 <HAL_UART_MspInit+0xf0>)
 8000dca:	f000 fd7b 	bl	80018c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000dce:	e031      	b.n	8000e34 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART3)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a1c      	ldr	r2, [pc, #112]	; (8000e48 <HAL_UART_MspInit+0xf4>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d12c      	bne.n	8000e34 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b18      	ldr	r3, [pc, #96]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a17      	ldr	r2, [pc, #92]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000de4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a10      	ldr	r2, [pc, #64]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000e00:	f043 0302 	orr.w	r3, r3, #2
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b0e      	ldr	r3, [pc, #56]	; (8000e40 <HAL_UART_MspInit+0xec>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0302 	and.w	r3, r3, #2
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000e12:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000e16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e20:	2303      	movs	r3, #3
 8000e22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000e24:	2307      	movs	r3, #7
 8000e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e28:	f107 031c 	add.w	r3, r7, #28
 8000e2c:	4619      	mov	r1, r3
 8000e2e:	4807      	ldr	r0, [pc, #28]	; (8000e4c <HAL_UART_MspInit+0xf8>)
 8000e30:	f000 fd48 	bl	80018c4 <HAL_GPIO_Init>
}
 8000e34:	bf00      	nop
 8000e36:	3730      	adds	r7, #48	; 0x30
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40004400 	.word	0x40004400
 8000e40:	40023800 	.word	0x40023800
 8000e44:	40020000 	.word	0x40020000
 8000e48:	40004800 	.word	0x40004800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e62:	e7fe      	b.n	8000e62 <HardFault_Handler+0x4>

08000e64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e64:	b480      	push	{r7}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e68:	e7fe      	b.n	8000e68 <MemManage_Handler+0x4>

08000e6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e6e:	e7fe      	b.n	8000e6e <BusFault_Handler+0x4>

08000e70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e70:	b480      	push	{r7}
 8000e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e74:	e7fe      	b.n	8000e74 <UsageFault_Handler+0x4>

08000e76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr

08000e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ea4:	f000 f8ca 	bl	800103c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ea8:	bf00      	nop
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b086      	sub	sp, #24
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb4:	4a14      	ldr	r2, [pc, #80]	; (8000f08 <_sbrk+0x5c>)
 8000eb6:	4b15      	ldr	r3, [pc, #84]	; (8000f0c <_sbrk+0x60>)
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec0:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <_sbrk+0x64>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d102      	bne.n	8000ece <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ec8:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <_sbrk+0x64>)
 8000eca:	4a12      	ldr	r2, [pc, #72]	; (8000f14 <_sbrk+0x68>)
 8000ecc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ece:	4b10      	ldr	r3, [pc, #64]	; (8000f10 <_sbrk+0x64>)
 8000ed0:	681a      	ldr	r2, [r3, #0]
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	d207      	bcs.n	8000eec <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000edc:	f002 f872 	bl	8002fc4 <__errno>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	230c      	movs	r3, #12
 8000ee4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b07      	ldr	r3, [pc, #28]	; (8000f10 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a05      	ldr	r2, [pc, #20]	; (8000f10 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3718      	adds	r7, #24
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	20020000 	.word	0x20020000
 8000f0c:	00000400 	.word	0x00000400
 8000f10:	200000b0 	.word	0x200000b0
 8000f14:	20002880 	.word	0x20002880

08000f18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f1c:	4b08      	ldr	r3, [pc, #32]	; (8000f40 <SystemInit+0x28>)
 8000f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f22:	4a07      	ldr	r2, [pc, #28]	; (8000f40 <SystemInit+0x28>)
 8000f24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000f2c:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <SystemInit+0x28>)
 8000f2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000f32:	609a      	str	r2, [r3, #8]
#endif
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000f48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000f4a:	e003      	b.n	8000f54 <LoopCopyDataInit>

08000f4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000f4c:	4b0c      	ldr	r3, [pc, #48]	; (8000f80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000f4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000f50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000f52:	3104      	adds	r1, #4

08000f54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000f54:	480b      	ldr	r0, [pc, #44]	; (8000f84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000f56:	4b0c      	ldr	r3, [pc, #48]	; (8000f88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000f58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000f5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000f5c:	d3f6      	bcc.n	8000f4c <CopyDataInit>
  ldr  r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000f60:	e002      	b.n	8000f68 <LoopFillZerobss>

08000f62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000f62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000f64:	f842 3b04 	str.w	r3, [r2], #4

08000f68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000f68:	4b09      	ldr	r3, [pc, #36]	; (8000f90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000f6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000f6c:	d3f9      	bcc.n	8000f62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000f6e:	f7ff ffd3 	bl	8000f18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f002 f82d 	bl	8002fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fb03 	bl	8000580 <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000f80:	08003b18 	.word	0x08003b18
  ldr  r0, =_sdata
 8000f84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000f88:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8000f8c:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8000f90:	2000287c 	.word	0x2000287c

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>
	...

08000f98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <HAL_Init+0x40>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	4a0d      	ldr	r2, [pc, #52]	; (8000fd8 <HAL_Init+0x40>)
 8000fa2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fa6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fa8:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <HAL_Init+0x40>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4a0a      	ldr	r2, [pc, #40]	; (8000fd8 <HAL_Init+0x40>)
 8000fae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <HAL_Init+0x40>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <HAL_Init+0x40>)
 8000fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fc0:	2003      	movs	r0, #3
 8000fc2:	f000 f92f 	bl	8001224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fc6:	2000      	movs	r0, #0
 8000fc8:	f000 f808 	bl	8000fdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fcc:	f7ff fe78 	bl	8000cc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fd0:	2300      	movs	r3, #0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	40023c00 	.word	0x40023c00

08000fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b082      	sub	sp, #8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <HAL_InitTick+0x54>)
 8000fe6:	681a      	ldr	r2, [r3, #0]
 8000fe8:	4b12      	ldr	r3, [pc, #72]	; (8001034 <HAL_InitTick+0x58>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	4619      	mov	r1, r3
 8000fee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ff2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ff6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f000 f939 	bl	8001272 <HAL_SYSTICK_Config>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	e00e      	b.n	8001028 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	2b0f      	cmp	r3, #15
 800100e:	d80a      	bhi.n	8001026 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001010:	2200      	movs	r2, #0
 8001012:	6879      	ldr	r1, [r7, #4]
 8001014:	f04f 30ff 	mov.w	r0, #4294967295
 8001018:	f000 f90f 	bl	800123a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800101c:	4a06      	ldr	r2, [pc, #24]	; (8001038 <HAL_InitTick+0x5c>)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001022:	2300      	movs	r3, #0
 8001024:	e000      	b.n	8001028 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	3708      	adds	r7, #8
 800102c:	46bd      	mov	sp, r7
 800102e:	bd80      	pop	{r7, pc}
 8001030:	20000008 	.word	0x20000008
 8001034:	20000010 	.word	0x20000010
 8001038:	2000000c 	.word	0x2000000c

0800103c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001040:	4b06      	ldr	r3, [pc, #24]	; (800105c <HAL_IncTick+0x20>)
 8001042:	781b      	ldrb	r3, [r3, #0]
 8001044:	461a      	mov	r2, r3
 8001046:	4b06      	ldr	r3, [pc, #24]	; (8001060 <HAL_IncTick+0x24>)
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4413      	add	r3, r2
 800104c:	4a04      	ldr	r2, [pc, #16]	; (8001060 <HAL_IncTick+0x24>)
 800104e:	6013      	str	r3, [r2, #0]
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr
 800105a:	bf00      	nop
 800105c:	20000010 	.word	0x20000010
 8001060:	20002854 	.word	0x20002854

08001064 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  return uwTick;
 8001068:	4b03      	ldr	r3, [pc, #12]	; (8001078 <HAL_GetTick+0x14>)
 800106a:	681b      	ldr	r3, [r3, #0]
}
 800106c:	4618      	mov	r0, r3
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop
 8001078:	20002854 	.word	0x20002854

0800107c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001084:	f7ff ffee 	bl	8001064 <HAL_GetTick>
 8001088:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001094:	d005      	beq.n	80010a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_Delay+0x40>)
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	461a      	mov	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	4413      	add	r3, r2
 80010a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010a2:	bf00      	nop
 80010a4:	f7ff ffde 	bl	8001064 <HAL_GetTick>
 80010a8:	4602      	mov	r2, r0
 80010aa:	68bb      	ldr	r3, [r7, #8]
 80010ac:	1ad3      	subs	r3, r2, r3
 80010ae:	68fa      	ldr	r2, [r7, #12]
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8f7      	bhi.n	80010a4 <HAL_Delay+0x28>
  {
  }
}
 80010b4:	bf00      	nop
 80010b6:	3710      	adds	r7, #16
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20000010 	.word	0x20000010

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	6039      	str	r1, [r7, #0]
 800112e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	2b00      	cmp	r3, #0
 8001136:	db0a      	blt.n	800114e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	b2da      	uxtb	r2, r3
 800113c:	490c      	ldr	r1, [pc, #48]	; (8001170 <__NVIC_SetPriority+0x4c>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	0112      	lsls	r2, r2, #4
 8001144:	b2d2      	uxtb	r2, r2
 8001146:	440b      	add	r3, r1
 8001148:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800114c:	e00a      	b.n	8001164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	b2da      	uxtb	r2, r3
 8001152:	4908      	ldr	r1, [pc, #32]	; (8001174 <__NVIC_SetPriority+0x50>)
 8001154:	79fb      	ldrb	r3, [r7, #7]
 8001156:	f003 030f 	and.w	r3, r3, #15
 800115a:	3b04      	subs	r3, #4
 800115c:	0112      	lsls	r2, r2, #4
 800115e:	b2d2      	uxtb	r2, r2
 8001160:	440b      	add	r3, r1
 8001162:	761a      	strb	r2, [r3, #24]
}
 8001164:	bf00      	nop
 8001166:	370c      	adds	r7, #12
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr
 8001170:	e000e100 	.word	0xe000e100
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001178:	b480      	push	{r7}
 800117a:	b089      	sub	sp, #36	; 0x24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	f003 0307 	and.w	r3, r3, #7
 800118a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f1c3 0307 	rsb	r3, r3, #7
 8001192:	2b04      	cmp	r3, #4
 8001194:	bf28      	it	cs
 8001196:	2304      	movcs	r3, #4
 8001198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119a:	69fb      	ldr	r3, [r7, #28]
 800119c:	3304      	adds	r3, #4
 800119e:	2b06      	cmp	r3, #6
 80011a0:	d902      	bls.n	80011a8 <NVIC_EncodePriority+0x30>
 80011a2:	69fb      	ldr	r3, [r7, #28]
 80011a4:	3b03      	subs	r3, #3
 80011a6:	e000      	b.n	80011aa <NVIC_EncodePriority+0x32>
 80011a8:	2300      	movs	r3, #0
 80011aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011ac:	f04f 32ff 	mov.w	r2, #4294967295
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43da      	mvns	r2, r3
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	401a      	ands	r2, r3
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c0:	f04f 31ff 	mov.w	r1, #4294967295
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43d9      	mvns	r1, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d0:	4313      	orrs	r3, r2
         );
}
 80011d2:	4618      	mov	r0, r3
 80011d4:	3724      	adds	r7, #36	; 0x24
 80011d6:	46bd      	mov	sp, r7
 80011d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011dc:	4770      	bx	lr
	...

080011e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3b01      	subs	r3, #1
 80011ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011f0:	d301      	bcc.n	80011f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f2:	2301      	movs	r3, #1
 80011f4:	e00f      	b.n	8001216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011f6:	4a0a      	ldr	r2, [pc, #40]	; (8001220 <SysTick_Config+0x40>)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3b01      	subs	r3, #1
 80011fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011fe:	210f      	movs	r1, #15
 8001200:	f04f 30ff 	mov.w	r0, #4294967295
 8001204:	f7ff ff8e 	bl	8001124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001208:	4b05      	ldr	r3, [pc, #20]	; (8001220 <SysTick_Config+0x40>)
 800120a:	2200      	movs	r2, #0
 800120c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800120e:	4b04      	ldr	r3, [pc, #16]	; (8001220 <SysTick_Config+0x40>)
 8001210:	2207      	movs	r2, #7
 8001212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	e000e010 	.word	0xe000e010

08001224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f7ff ff47 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
 8001246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800124c:	f7ff ff5c 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001252:	687a      	ldr	r2, [r7, #4]
 8001254:	68b9      	ldr	r1, [r7, #8]
 8001256:	6978      	ldr	r0, [r7, #20]
 8001258:	f7ff ff8e 	bl	8001178 <NVIC_EncodePriority>
 800125c:	4602      	mov	r2, r0
 800125e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001262:	4611      	mov	r1, r2
 8001264:	4618      	mov	r0, r3
 8001266:	f7ff ff5d 	bl	8001124 <__NVIC_SetPriority>
}
 800126a:	bf00      	nop
 800126c:	3718      	adds	r7, #24
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}

08001272 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800127a:	6878      	ldr	r0, [r7, #4]
 800127c:	f7ff ffb0 	bl	80011e0 <SysTick_Config>
 8001280:	4603      	mov	r3, r0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d101      	bne.n	800129c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e00e      	b.n	80012ba <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	795b      	ldrb	r3, [r3, #5]
 80012a0:	b2db      	uxtb	r3, r3
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d105      	bne.n	80012b2 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	2200      	movs	r2, #0
 80012aa:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f7ff fd2f 	bl	8000d10 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2201      	movs	r2, #1
 80012b6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80012b8:	2300      	movs	r3, #0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}

080012c2 <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 80012c2:	b480      	push	{r7}
 80012c4:	b087      	sub	sp, #28
 80012c6:	af00      	add	r7, sp, #0
 80012c8:	60f8      	str	r0, [r7, #12]
 80012ca:	60b9      	str	r1, [r7, #8]
 80012cc:	607a      	str	r2, [r7, #4]
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	2202      	movs	r2, #2
 80012d6:	715a      	strb	r2, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]
 80012dc:	e00a      	b.n	80012f4 <HAL_CRC_Accumulate+0x32>
  {
    hcrc->Instance->DR = pBuffer[index];
 80012de:	697b      	ldr	r3, [r7, #20]
 80012e0:	009b      	lsls	r3, r3, #2
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	441a      	add	r2, r3
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	6812      	ldr	r2, [r2, #0]
 80012ec:	601a      	str	r2, [r3, #0]
  for (index = 0U; index < BufferLength; index++)
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	3301      	adds	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	429a      	cmp	r2, r3
 80012fa:	d3f0      	bcc.n	80012de <HAL_CRC_Accumulate+0x1c>
  }
  temp = hcrc->Instance->DR;
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	613b      	str	r3, [r7, #16]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2201      	movs	r2, #1
 8001308:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
 800130a:	693b      	ldr	r3, [r7, #16]
}
 800130c:	4618      	mov	r0, r3
 800130e:	371c      	adds	r7, #28
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr

08001318 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0
 800131e:	60f8      	str	r0, [r7, #12]
 8001320:	60b9      	str	r1, [r7, #8]
 8001322:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001326:	2301      	movs	r3, #1
 8001328:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800132a:	4b23      	ldr	r3, [pc, #140]	; (80013b8 <HAL_FLASH_Program+0xa0>)
 800132c:	7e1b      	ldrb	r3, [r3, #24]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d101      	bne.n	8001336 <HAL_FLASH_Program+0x1e>
 8001332:	2302      	movs	r3, #2
 8001334:	e03b      	b.n	80013ae <HAL_FLASH_Program+0x96>
 8001336:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <HAL_FLASH_Program+0xa0>)
 8001338:	2201      	movs	r2, #1
 800133a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800133c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001340:	f000 f870 	bl	8001424 <FLASH_WaitForLastOperation>
 8001344:	4603      	mov	r3, r0
 8001346:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d12b      	bne.n	80013a6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d105      	bne.n	8001360 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001354:	783b      	ldrb	r3, [r7, #0]
 8001356:	4619      	mov	r1, r3
 8001358:	68b8      	ldr	r0, [r7, #8]
 800135a:	f000 f919 	bl	8001590 <FLASH_Program_Byte>
 800135e:	e016      	b.n	800138e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d105      	bne.n	8001372 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001366:	883b      	ldrh	r3, [r7, #0]
 8001368:	4619      	mov	r1, r3
 800136a:	68b8      	ldr	r0, [r7, #8]
 800136c:	f000 f8ec 	bl	8001548 <FLASH_Program_HalfWord>
 8001370:	e00d      	b.n	800138e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	2b02      	cmp	r3, #2
 8001376:	d105      	bne.n	8001384 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	4619      	mov	r1, r3
 800137c:	68b8      	ldr	r0, [r7, #8]
 800137e:	f000 f8c1 	bl	8001504 <FLASH_Program_Word>
 8001382:	e004      	b.n	800138e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001384:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001388:	68b8      	ldr	r0, [r7, #8]
 800138a:	f000 f88b 	bl	80014a4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800138e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001392:	f000 f847 	bl	8001424 <FLASH_WaitForLastOperation>
 8001396:	4603      	mov	r3, r0
 8001398:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800139a:	4b08      	ldr	r3, [pc, #32]	; (80013bc <HAL_FLASH_Program+0xa4>)
 800139c:	691b      	ldr	r3, [r3, #16]
 800139e:	4a07      	ldr	r2, [pc, #28]	; (80013bc <HAL_FLASH_Program+0xa4>)
 80013a0:	f023 0301 	bic.w	r3, r3, #1
 80013a4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80013a6:	4b04      	ldr	r3, [pc, #16]	; (80013b8 <HAL_FLASH_Program+0xa0>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80013ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20002858 	.word	0x20002858
 80013bc:	40023c00 	.word	0x40023c00

080013c0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b083      	sub	sp, #12
 80013c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013ca:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_FLASH_Unlock+0x38>)
 80013cc:	691b      	ldr	r3, [r3, #16]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	da0b      	bge.n	80013ea <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80013d2:	4b09      	ldr	r3, [pc, #36]	; (80013f8 <HAL_FLASH_Unlock+0x38>)
 80013d4:	4a09      	ldr	r2, [pc, #36]	; (80013fc <HAL_FLASH_Unlock+0x3c>)
 80013d6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80013d8:	4b07      	ldr	r3, [pc, #28]	; (80013f8 <HAL_FLASH_Unlock+0x38>)
 80013da:	4a09      	ldr	r2, [pc, #36]	; (8001400 <HAL_FLASH_Unlock+0x40>)
 80013dc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80013de:	4b06      	ldr	r3, [pc, #24]	; (80013f8 <HAL_FLASH_Unlock+0x38>)
 80013e0:	691b      	ldr	r3, [r3, #16]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	da01      	bge.n	80013ea <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80013ea:	79fb      	ldrb	r3, [r7, #7]
}
 80013ec:	4618      	mov	r0, r3
 80013ee:	370c      	adds	r7, #12
 80013f0:	46bd      	mov	sp, r7
 80013f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f6:	4770      	bx	lr
 80013f8:	40023c00 	.word	0x40023c00
 80013fc:	45670123 	.word	0x45670123
 8001400:	cdef89ab 	.word	0xcdef89ab

08001404 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8001408:	4b05      	ldr	r3, [pc, #20]	; (8001420 <HAL_FLASH_Lock+0x1c>)
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_FLASH_Lock+0x1c>)
 800140e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001412:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	46bd      	mov	sp, r7
 800141a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141e:	4770      	bx	lr
 8001420:	40023c00 	.word	0x40023c00

08001424 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800142c:	2300      	movs	r3, #0
 800142e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001430:	4b1a      	ldr	r3, [pc, #104]	; (800149c <FLASH_WaitForLastOperation+0x78>)
 8001432:	2200      	movs	r2, #0
 8001434:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001436:	f7ff fe15 	bl	8001064 <HAL_GetTick>
 800143a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800143c:	e010      	b.n	8001460 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001444:	d00c      	beq.n	8001460 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d007      	beq.n	800145c <FLASH_WaitForLastOperation+0x38>
 800144c:	f7ff fe0a 	bl	8001064 <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	1ad3      	subs	r3, r2, r3
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	429a      	cmp	r2, r3
 800145a:	d201      	bcs.n	8001460 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e019      	b.n	8001494 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001460:	4b0f      	ldr	r3, [pc, #60]	; (80014a0 <FLASH_WaitForLastOperation+0x7c>)
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001468:	2b00      	cmp	r3, #0
 800146a:	d1e8      	bne.n	800143e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800146c:	4b0c      	ldr	r3, [pc, #48]	; (80014a0 <FLASH_WaitForLastOperation+0x7c>)
 800146e:	68db      	ldr	r3, [r3, #12]
 8001470:	f003 0301 	and.w	r3, r3, #1
 8001474:	2b00      	cmp	r3, #0
 8001476:	d002      	beq.n	800147e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001478:	4b09      	ldr	r3, [pc, #36]	; (80014a0 <FLASH_WaitForLastOperation+0x7c>)
 800147a:	2201      	movs	r2, #1
 800147c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <FLASH_WaitForLastOperation+0x7c>)
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800148a:	f000 f8a3 	bl	80015d4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001492:	2300      	movs	r3, #0
  
}  
 8001494:	4618      	mov	r0, r3
 8001496:	3710      	adds	r7, #16
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20002858 	.word	0x20002858
 80014a0:	40023c00 	.word	0x40023c00

080014a4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80014a4:	b490      	push	{r4, r7}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	60f8      	str	r0, [r7, #12]
 80014ac:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80014b0:	4b13      	ldr	r3, [pc, #76]	; (8001500 <FLASH_Program_DoubleWord+0x5c>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	4a12      	ldr	r2, [pc, #72]	; (8001500 <FLASH_Program_DoubleWord+0x5c>)
 80014b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80014ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80014bc:	4b10      	ldr	r3, [pc, #64]	; (8001500 <FLASH_Program_DoubleWord+0x5c>)
 80014be:	691b      	ldr	r3, [r3, #16]
 80014c0:	4a0f      	ldr	r2, [pc, #60]	; (8001500 <FLASH_Program_DoubleWord+0x5c>)
 80014c2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80014c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80014c8:	4b0d      	ldr	r3, [pc, #52]	; (8001500 <FLASH_Program_DoubleWord+0x5c>)
 80014ca:	691b      	ldr	r3, [r3, #16]
 80014cc:	4a0c      	ldr	r2, [pc, #48]	; (8001500 <FLASH_Program_DoubleWord+0x5c>)
 80014ce:	f043 0301 	orr.w	r3, r3, #1
 80014d2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	683a      	ldr	r2, [r7, #0]
 80014d8:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80014da:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80014de:	e9d7 1200 	ldrd	r1, r2, [r7]
 80014e2:	f04f 0300 	mov.w	r3, #0
 80014e6:	f04f 0400 	mov.w	r4, #0
 80014ea:	0013      	movs	r3, r2
 80014ec:	2400      	movs	r4, #0
 80014ee:	68fa      	ldr	r2, [r7, #12]
 80014f0:	3204      	adds	r2, #4
 80014f2:	6013      	str	r3, [r2, #0]
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc90      	pop	{r4, r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	40023c00 	.word	0x40023c00

08001504 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <FLASH_Program_Word+0x40>)
 8001510:	691b      	ldr	r3, [r3, #16]
 8001512:	4a0c      	ldr	r2, [pc, #48]	; (8001544 <FLASH_Program_Word+0x40>)
 8001514:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001518:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <FLASH_Program_Word+0x40>)
 800151c:	691b      	ldr	r3, [r3, #16]
 800151e:	4a09      	ldr	r2, [pc, #36]	; (8001544 <FLASH_Program_Word+0x40>)
 8001520:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001524:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001526:	4b07      	ldr	r3, [pc, #28]	; (8001544 <FLASH_Program_Word+0x40>)
 8001528:	691b      	ldr	r3, [r3, #16]
 800152a:	4a06      	ldr	r2, [pc, #24]	; (8001544 <FLASH_Program_Word+0x40>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	683a      	ldr	r2, [r7, #0]
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	40023c00 	.word	0x40023c00

08001548 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001554:	4b0d      	ldr	r3, [pc, #52]	; (800158c <FLASH_Program_HalfWord+0x44>)
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	4a0c      	ldr	r2, [pc, #48]	; (800158c <FLASH_Program_HalfWord+0x44>)
 800155a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800155e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <FLASH_Program_HalfWord+0x44>)
 8001562:	691b      	ldr	r3, [r3, #16]
 8001564:	4a09      	ldr	r2, [pc, #36]	; (800158c <FLASH_Program_HalfWord+0x44>)
 8001566:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800156a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <FLASH_Program_HalfWord+0x44>)
 800156e:	691b      	ldr	r3, [r3, #16]
 8001570:	4a06      	ldr	r2, [pc, #24]	; (800158c <FLASH_Program_HalfWord+0x44>)
 8001572:	f043 0301 	orr.w	r3, r3, #1
 8001576:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	887a      	ldrh	r2, [r7, #2]
 800157c:	801a      	strh	r2, [r3, #0]
}
 800157e:	bf00      	nop
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40023c00 	.word	0x40023c00

08001590 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001590:	b480      	push	{r7}
 8001592:	b083      	sub	sp, #12
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	460b      	mov	r3, r1
 800159a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <FLASH_Program_Byte+0x40>)
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	4a0b      	ldr	r2, [pc, #44]	; (80015d0 <FLASH_Program_Byte+0x40>)
 80015a2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80015a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80015a8:	4b09      	ldr	r3, [pc, #36]	; (80015d0 <FLASH_Program_Byte+0x40>)
 80015aa:	4a09      	ldr	r2, [pc, #36]	; (80015d0 <FLASH_Program_Byte+0x40>)
 80015ac:	691b      	ldr	r3, [r3, #16]
 80015ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80015b0:	4b07      	ldr	r3, [pc, #28]	; (80015d0 <FLASH_Program_Byte+0x40>)
 80015b2:	691b      	ldr	r3, [r3, #16]
 80015b4:	4a06      	ldr	r2, [pc, #24]	; (80015d0 <FLASH_Program_Byte+0x40>)
 80015b6:	f043 0301 	orr.w	r3, r3, #1
 80015ba:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	78fa      	ldrb	r2, [r7, #3]
 80015c0:	701a      	strb	r2, [r3, #0]
}
 80015c2:	bf00      	nop
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	40023c00 	.word	0x40023c00

080015d4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80015d8:	4b27      	ldr	r3, [pc, #156]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 80015da:	68db      	ldr	r3, [r3, #12]
 80015dc:	f003 0310 	and.w	r3, r3, #16
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d008      	beq.n	80015f6 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80015e4:	4b25      	ldr	r3, [pc, #148]	; (800167c <FLASH_SetErrorCode+0xa8>)
 80015e6:	69db      	ldr	r3, [r3, #28]
 80015e8:	f043 0310 	orr.w	r3, r3, #16
 80015ec:	4a23      	ldr	r2, [pc, #140]	; (800167c <FLASH_SetErrorCode+0xa8>)
 80015ee:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 80015f2:	2210      	movs	r2, #16
 80015f4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80015f6:	4b20      	ldr	r3, [pc, #128]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 80015f8:	68db      	ldr	r3, [r3, #12]
 80015fa:	f003 0320 	and.w	r3, r3, #32
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d008      	beq.n	8001614 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001602:	4b1e      	ldr	r3, [pc, #120]	; (800167c <FLASH_SetErrorCode+0xa8>)
 8001604:	69db      	ldr	r3, [r3, #28]
 8001606:	f043 0308 	orr.w	r3, r3, #8
 800160a:	4a1c      	ldr	r2, [pc, #112]	; (800167c <FLASH_SetErrorCode+0xa8>)
 800160c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800160e:	4b1a      	ldr	r3, [pc, #104]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 8001610:	2220      	movs	r2, #32
 8001612:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001614:	4b18      	ldr	r3, [pc, #96]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 8001616:	68db      	ldr	r3, [r3, #12]
 8001618:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161c:	2b00      	cmp	r3, #0
 800161e:	d008      	beq.n	8001632 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001620:	4b16      	ldr	r3, [pc, #88]	; (800167c <FLASH_SetErrorCode+0xa8>)
 8001622:	69db      	ldr	r3, [r3, #28]
 8001624:	f043 0304 	orr.w	r3, r3, #4
 8001628:	4a14      	ldr	r2, [pc, #80]	; (800167c <FLASH_SetErrorCode+0xa8>)
 800162a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 800162c:	4b12      	ldr	r3, [pc, #72]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 800162e:	2240      	movs	r2, #64	; 0x40
 8001630:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001632:	4b11      	ldr	r3, [pc, #68]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163a:	2b00      	cmp	r3, #0
 800163c:	d008      	beq.n	8001650 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <FLASH_SetErrorCode+0xa8>)
 8001640:	69db      	ldr	r3, [r3, #28]
 8001642:	f043 0302 	orr.w	r3, r3, #2
 8001646:	4a0d      	ldr	r2, [pc, #52]	; (800167c <FLASH_SetErrorCode+0xa8>)
 8001648:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800164a:	4b0b      	ldr	r3, [pc, #44]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 8001652:	68db      	ldr	r3, [r3, #12]
 8001654:	f003 0302 	and.w	r3, r3, #2
 8001658:	2b00      	cmp	r3, #0
 800165a:	d008      	beq.n	800166e <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800165c:	4b07      	ldr	r3, [pc, #28]	; (800167c <FLASH_SetErrorCode+0xa8>)
 800165e:	69db      	ldr	r3, [r3, #28]
 8001660:	f043 0320 	orr.w	r3, r3, #32
 8001664:	4a05      	ldr	r2, [pc, #20]	; (800167c <FLASH_SetErrorCode+0xa8>)
 8001666:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001668:	4b03      	ldr	r3, [pc, #12]	; (8001678 <FLASH_SetErrorCode+0xa4>)
 800166a:	2202      	movs	r2, #2
 800166c:	60da      	str	r2, [r3, #12]
  }
}
 800166e:	bf00      	nop
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40023c00 	.word	0x40023c00
 800167c:	20002858 	.word	0x20002858

08001680 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b084      	sub	sp, #16
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
 8001688:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800168e:	2300      	movs	r3, #0
 8001690:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001692:	4b31      	ldr	r3, [pc, #196]	; (8001758 <HAL_FLASHEx_Erase+0xd8>)
 8001694:	7e1b      	ldrb	r3, [r3, #24]
 8001696:	2b01      	cmp	r3, #1
 8001698:	d101      	bne.n	800169e <HAL_FLASHEx_Erase+0x1e>
 800169a:	2302      	movs	r3, #2
 800169c:	e058      	b.n	8001750 <HAL_FLASHEx_Erase+0xd0>
 800169e:	4b2e      	ldr	r3, [pc, #184]	; (8001758 <HAL_FLASHEx_Erase+0xd8>)
 80016a0:	2201      	movs	r2, #1
 80016a2:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016a4:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016a8:	f7ff febc 	bl	8001424 <FLASH_WaitForLastOperation>
 80016ac:	4603      	mov	r3, r0
 80016ae:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80016b0:	7bfb      	ldrb	r3, [r7, #15]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d148      	bne.n	8001748 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f04f 32ff 	mov.w	r2, #4294967295
 80016bc:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d115      	bne.n	80016f2 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	691b      	ldr	r3, [r3, #16]
 80016ca:	b2da      	uxtb	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	4619      	mov	r1, r3
 80016d2:	4610      	mov	r0, r2
 80016d4:	f000 f844 	bl	8001760 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80016d8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80016dc:	f7ff fea2 	bl	8001424 <FLASH_WaitForLastOperation>
 80016e0:	4603      	mov	r3, r0
 80016e2:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80016e4:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_FLASHEx_Erase+0xdc>)
 80016e6:	691b      	ldr	r3, [r3, #16]
 80016e8:	4a1c      	ldr	r2, [pc, #112]	; (800175c <HAL_FLASHEx_Erase+0xdc>)
 80016ea:	f023 0304 	bic.w	r3, r3, #4
 80016ee:	6113      	str	r3, [r2, #16]
 80016f0:	e028      	b.n	8001744 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	60bb      	str	r3, [r7, #8]
 80016f8:	e01c      	b.n	8001734 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	691b      	ldr	r3, [r3, #16]
 80016fe:	b2db      	uxtb	r3, r3
 8001700:	4619      	mov	r1, r3
 8001702:	68b8      	ldr	r0, [r7, #8]
 8001704:	f000 f850 	bl	80017a8 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001708:	f24c 3050 	movw	r0, #50000	; 0xc350
 800170c:	f7ff fe8a 	bl	8001424 <FLASH_WaitForLastOperation>
 8001710:	4603      	mov	r3, r0
 8001712:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_FLASHEx_Erase+0xdc>)
 8001716:	691b      	ldr	r3, [r3, #16]
 8001718:	4a10      	ldr	r2, [pc, #64]	; (800175c <HAL_FLASHEx_Erase+0xdc>)
 800171a:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800171e:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8001720:	7bfb      	ldrb	r3, [r7, #15]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d003      	beq.n	800172e <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	68ba      	ldr	r2, [r7, #8]
 800172a:	601a      	str	r2, [r3, #0]
          break;
 800172c:	e00a      	b.n	8001744 <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800172e:	68bb      	ldr	r3, [r7, #8]
 8001730:	3301      	adds	r3, #1
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	68da      	ldr	r2, [r3, #12]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	4413      	add	r3, r2
 800173e:	68ba      	ldr	r2, [r7, #8]
 8001740:	429a      	cmp	r2, r3
 8001742:	d3da      	bcc.n	80016fa <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 8001744:	f000 f878 	bl	8001838 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001748:	4b03      	ldr	r3, [pc, #12]	; (8001758 <HAL_FLASHEx_Erase+0xd8>)
 800174a:	2200      	movs	r2, #0
 800174c:	761a      	strb	r2, [r3, #24]

  return status;
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3710      	adds	r7, #16
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20002858 	.word	0x20002858
 800175c:	40023c00 	.word	0x40023c00

08001760 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	6039      	str	r1, [r7, #0]
 800176a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <FLASH_MassErase+0x44>)
 800176e:	691b      	ldr	r3, [r3, #16]
 8001770:	4a0c      	ldr	r2, [pc, #48]	; (80017a4 <FLASH_MassErase+0x44>)
 8001772:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001776:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001778:	4b0a      	ldr	r3, [pc, #40]	; (80017a4 <FLASH_MassErase+0x44>)
 800177a:	691b      	ldr	r3, [r3, #16]
 800177c:	4a09      	ldr	r2, [pc, #36]	; (80017a4 <FLASH_MassErase+0x44>)
 800177e:	f043 0304 	orr.w	r3, r3, #4
 8001782:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 8001784:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <FLASH_MassErase+0x44>)
 8001786:	691a      	ldr	r2, [r3, #16]
 8001788:	79fb      	ldrb	r3, [r7, #7]
 800178a:	021b      	lsls	r3, r3, #8
 800178c:	4313      	orrs	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <FLASH_MassErase+0x44>)
 8001790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001794:	6113      	str	r3, [r2, #16]
}
 8001796:	bf00      	nop
 8001798:	370c      	adds	r7, #12
 800179a:	46bd      	mov	sp, r7
 800179c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a0:	4770      	bx	lr
 80017a2:	bf00      	nop
 80017a4:	40023c00 	.word	0x40023c00

080017a8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b085      	sub	sp, #20
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80017b4:	2300      	movs	r3, #0
 80017b6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80017b8:	78fb      	ldrb	r3, [r7, #3]
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80017be:	2300      	movs	r3, #0
 80017c0:	60fb      	str	r3, [r7, #12]
 80017c2:	e010      	b.n	80017e6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80017c4:	78fb      	ldrb	r3, [r7, #3]
 80017c6:	2b01      	cmp	r3, #1
 80017c8:	d103      	bne.n	80017d2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80017ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e009      	b.n	80017e6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d103      	bne.n	80017e0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80017d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	e002      	b.n	80017e6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80017e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80017e6:	4b13      	ldr	r3, [pc, #76]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 80017e8:	691b      	ldr	r3, [r3, #16]
 80017ea:	4a12      	ldr	r2, [pc, #72]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 80017ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80017f0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80017f2:	4b10      	ldr	r3, [pc, #64]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 80017f4:	691a      	ldr	r2, [r3, #16]
 80017f6:	490f      	ldr	r1, [pc, #60]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 80017f8:	68fb      	ldr	r3, [r7, #12]
 80017fa:	4313      	orrs	r3, r2
 80017fc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80017fe:	4b0d      	ldr	r3, [pc, #52]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 8001800:	691b      	ldr	r3, [r3, #16]
 8001802:	4a0c      	ldr	r2, [pc, #48]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 8001804:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001808:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800180a:	4b0a      	ldr	r3, [pc, #40]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 800180c:	691a      	ldr	r2, [r3, #16]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	00db      	lsls	r3, r3, #3
 8001812:	4313      	orrs	r3, r2
 8001814:	4a07      	ldr	r2, [pc, #28]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 8001816:	f043 0302 	orr.w	r3, r3, #2
 800181a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800181c:	4b05      	ldr	r3, [pc, #20]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 800181e:	691b      	ldr	r3, [r3, #16]
 8001820:	4a04      	ldr	r2, [pc, #16]	; (8001834 <FLASH_Erase_Sector+0x8c>)
 8001822:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001826:	6113      	str	r3, [r2, #16]
}
 8001828:	bf00      	nop
 800182a:	3714      	adds	r7, #20
 800182c:	46bd      	mov	sp, r7
 800182e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001832:	4770      	bx	lr
 8001834:	40023c00 	.word	0x40023c00

08001838 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 800183c:	4b20      	ldr	r3, [pc, #128]	; (80018c0 <FLASH_FlushCaches+0x88>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001844:	2b00      	cmp	r3, #0
 8001846:	d017      	beq.n	8001878 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8001848:	4b1d      	ldr	r3, [pc, #116]	; (80018c0 <FLASH_FlushCaches+0x88>)
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <FLASH_FlushCaches+0x88>)
 800184e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001852:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8001854:	4b1a      	ldr	r3, [pc, #104]	; (80018c0 <FLASH_FlushCaches+0x88>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a19      	ldr	r2, [pc, #100]	; (80018c0 <FLASH_FlushCaches+0x88>)
 800185a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800185e:	6013      	str	r3, [r2, #0]
 8001860:	4b17      	ldr	r3, [pc, #92]	; (80018c0 <FLASH_FlushCaches+0x88>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a16      	ldr	r2, [pc, #88]	; (80018c0 <FLASH_FlushCaches+0x88>)
 8001866:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800186a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800186c:	4b14      	ldr	r3, [pc, #80]	; (80018c0 <FLASH_FlushCaches+0x88>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a13      	ldr	r2, [pc, #76]	; (80018c0 <FLASH_FlushCaches+0x88>)
 8001872:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001876:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8001878:	4b11      	ldr	r3, [pc, #68]	; (80018c0 <FLASH_FlushCaches+0x88>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001880:	2b00      	cmp	r3, #0
 8001882:	d017      	beq.n	80018b4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8001884:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <FLASH_FlushCaches+0x88>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	4a0d      	ldr	r2, [pc, #52]	; (80018c0 <FLASH_FlushCaches+0x88>)
 800188a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800188e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8001890:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <FLASH_FlushCaches+0x88>)
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a0a      	ldr	r2, [pc, #40]	; (80018c0 <FLASH_FlushCaches+0x88>)
 8001896:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800189a:	6013      	str	r3, [r2, #0]
 800189c:	4b08      	ldr	r3, [pc, #32]	; (80018c0 <FLASH_FlushCaches+0x88>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a07      	ldr	r2, [pc, #28]	; (80018c0 <FLASH_FlushCaches+0x88>)
 80018a2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018a6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a8:	4b05      	ldr	r3, [pc, #20]	; (80018c0 <FLASH_FlushCaches+0x88>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <FLASH_FlushCaches+0x88>)
 80018ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b2:	6013      	str	r3, [r2, #0]
  }
}
 80018b4:	bf00      	nop
 80018b6:	46bd      	mov	sp, r7
 80018b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018bc:	4770      	bx	lr
 80018be:	bf00      	nop
 80018c0:	40023c00 	.word	0x40023c00

080018c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b089      	sub	sp, #36	; 0x24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
 80018cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018d6:	2300      	movs	r3, #0
 80018d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018da:	2300      	movs	r3, #0
 80018dc:	61fb      	str	r3, [r7, #28]
 80018de:	e16b      	b.n	8001bb8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018e0:	2201      	movs	r2, #1
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	fa02 f303 	lsl.w	r3, r2, r3
 80018e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	4013      	ands	r3, r2
 80018f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018f4:	693a      	ldr	r2, [r7, #16]
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	f040 815a 	bne.w	8001bb2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	2b01      	cmp	r3, #1
 8001904:	d00b      	beq.n	800191e <HAL_GPIO_Init+0x5a>
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d007      	beq.n	800191e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001912:	2b11      	cmp	r3, #17
 8001914:	d003      	beq.n	800191e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001916:	683b      	ldr	r3, [r7, #0]
 8001918:	685b      	ldr	r3, [r3, #4]
 800191a:	2b12      	cmp	r3, #18
 800191c:	d130      	bne.n	8001980 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001924:	69fb      	ldr	r3, [r7, #28]
 8001926:	005b      	lsls	r3, r3, #1
 8001928:	2203      	movs	r2, #3
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43db      	mvns	r3, r3
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	4013      	ands	r3, r2
 8001934:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	005b      	lsls	r3, r3, #1
 800193e:	fa02 f303 	lsl.w	r3, r2, r3
 8001942:	69ba      	ldr	r2, [r7, #24]
 8001944:	4313      	orrs	r3, r2
 8001946:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	69ba      	ldr	r2, [r7, #24]
 800194c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001954:	2201      	movs	r2, #1
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 0201 	and.w	r2, r3, #1
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	fa02 f303 	lsl.w	r3, r2, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4313      	orrs	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001986:	69fb      	ldr	r3, [r7, #28]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	fa02 f303 	lsl.w	r3, r2, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	69ba      	ldr	r2, [r7, #24]
 8001994:	4013      	ands	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	689a      	ldr	r2, [r3, #8]
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	fa02 f303 	lsl.w	r3, r2, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	2b02      	cmp	r3, #2
 80019b6:	d003      	beq.n	80019c0 <HAL_GPIO_Init+0xfc>
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	2b12      	cmp	r3, #18
 80019be:	d123      	bne.n	8001a08 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	08da      	lsrs	r2, r3, #3
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3208      	adds	r2, #8
 80019c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	f003 0307 	and.w	r3, r3, #7
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	220f      	movs	r2, #15
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	691a      	ldr	r2, [r3, #16]
 80019e8:	69fb      	ldr	r3, [r7, #28]
 80019ea:	f003 0307 	and.w	r3, r3, #7
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019fa:	69fb      	ldr	r3, [r7, #28]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	69b9      	ldr	r1, [r7, #24]
 8001a04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	43db      	mvns	r3, r3
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	f003 0203 	and.w	r2, r3, #3
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a30:	69ba      	ldr	r2, [r7, #24]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	69ba      	ldr	r2, [r7, #24]
 8001a3a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	f000 80b4 	beq.w	8001bb2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
 8001a4e:	4b5f      	ldr	r3, [pc, #380]	; (8001bcc <HAL_GPIO_Init+0x308>)
 8001a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a52:	4a5e      	ldr	r2, [pc, #376]	; (8001bcc <HAL_GPIO_Init+0x308>)
 8001a54:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a58:	6453      	str	r3, [r2, #68]	; 0x44
 8001a5a:	4b5c      	ldr	r3, [pc, #368]	; (8001bcc <HAL_GPIO_Init+0x308>)
 8001a5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a62:	60fb      	str	r3, [r7, #12]
 8001a64:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a66:	4a5a      	ldr	r2, [pc, #360]	; (8001bd0 <HAL_GPIO_Init+0x30c>)
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	089b      	lsrs	r3, r3, #2
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a72:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	f003 0303 	and.w	r3, r3, #3
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	220f      	movs	r2, #15
 8001a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a82:	43db      	mvns	r3, r3
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	4013      	ands	r3, r2
 8001a88:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a51      	ldr	r2, [pc, #324]	; (8001bd4 <HAL_GPIO_Init+0x310>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d02b      	beq.n	8001aea <HAL_GPIO_Init+0x226>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a50      	ldr	r2, [pc, #320]	; (8001bd8 <HAL_GPIO_Init+0x314>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d025      	beq.n	8001ae6 <HAL_GPIO_Init+0x222>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4f      	ldr	r2, [pc, #316]	; (8001bdc <HAL_GPIO_Init+0x318>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d01f      	beq.n	8001ae2 <HAL_GPIO_Init+0x21e>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4e      	ldr	r2, [pc, #312]	; (8001be0 <HAL_GPIO_Init+0x31c>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d019      	beq.n	8001ade <HAL_GPIO_Init+0x21a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4d      	ldr	r2, [pc, #308]	; (8001be4 <HAL_GPIO_Init+0x320>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d013      	beq.n	8001ada <HAL_GPIO_Init+0x216>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	4a4c      	ldr	r2, [pc, #304]	; (8001be8 <HAL_GPIO_Init+0x324>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d00d      	beq.n	8001ad6 <HAL_GPIO_Init+0x212>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4a4b      	ldr	r2, [pc, #300]	; (8001bec <HAL_GPIO_Init+0x328>)
 8001abe:	4293      	cmp	r3, r2
 8001ac0:	d007      	beq.n	8001ad2 <HAL_GPIO_Init+0x20e>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4a4a      	ldr	r2, [pc, #296]	; (8001bf0 <HAL_GPIO_Init+0x32c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d101      	bne.n	8001ace <HAL_GPIO_Init+0x20a>
 8001aca:	2307      	movs	r3, #7
 8001acc:	e00e      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ace:	2308      	movs	r3, #8
 8001ad0:	e00c      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ad2:	2306      	movs	r3, #6
 8001ad4:	e00a      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ad6:	2305      	movs	r3, #5
 8001ad8:	e008      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ada:	2304      	movs	r3, #4
 8001adc:	e006      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e004      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ae2:	2302      	movs	r3, #2
 8001ae4:	e002      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001ae6:	2301      	movs	r3, #1
 8001ae8:	e000      	b.n	8001aec <HAL_GPIO_Init+0x228>
 8001aea:	2300      	movs	r3, #0
 8001aec:	69fa      	ldr	r2, [r7, #28]
 8001aee:	f002 0203 	and.w	r2, r2, #3
 8001af2:	0092      	lsls	r2, r2, #2
 8001af4:	4093      	lsls	r3, r2
 8001af6:	69ba      	ldr	r2, [r7, #24]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001afc:	4934      	ldr	r1, [pc, #208]	; (8001bd0 <HAL_GPIO_Init+0x30c>)
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	089b      	lsrs	r3, r3, #2
 8001b02:	3302      	adds	r3, #2
 8001b04:	69ba      	ldr	r2, [r7, #24]
 8001b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b0a:	4b3a      	ldr	r3, [pc, #232]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b10:	693b      	ldr	r3, [r7, #16]
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b2e:	4a31      	ldr	r2, [pc, #196]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b30:	69bb      	ldr	r3, [r7, #24]
 8001b32:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b34:	4b2f      	ldr	r3, [pc, #188]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b3a:	693b      	ldr	r3, [r7, #16]
 8001b3c:	43db      	mvns	r3, r3
 8001b3e:	69ba      	ldr	r2, [r7, #24]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	685b      	ldr	r3, [r3, #4]
 8001b48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d003      	beq.n	8001b58 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001b50:	69ba      	ldr	r2, [r7, #24]
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	4313      	orrs	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b58:	4a26      	ldr	r2, [pc, #152]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b5a:	69bb      	ldr	r3, [r7, #24]
 8001b5c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b5e:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b60:	689b      	ldr	r3, [r3, #8]
 8001b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b64:	693b      	ldr	r3, [r7, #16]
 8001b66:	43db      	mvns	r3, r3
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d003      	beq.n	8001b82 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b82:	4a1c      	ldr	r2, [pc, #112]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b8e:	693b      	ldr	r3, [r7, #16]
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d003      	beq.n	8001bac <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ba4:	69ba      	ldr	r2, [r7, #24]
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001bac:	4a11      	ldr	r2, [pc, #68]	; (8001bf4 <HAL_GPIO_Init+0x330>)
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	61fb      	str	r3, [r7, #28]
 8001bb8:	69fb      	ldr	r3, [r7, #28]
 8001bba:	2b0f      	cmp	r3, #15
 8001bbc:	f67f ae90 	bls.w	80018e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001bc0:	bf00      	nop
 8001bc2:	3724      	adds	r7, #36	; 0x24
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bca:	4770      	bx	lr
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	40013800 	.word	0x40013800
 8001bd4:	40020000 	.word	0x40020000
 8001bd8:	40020400 	.word	0x40020400
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020c00 	.word	0x40020c00
 8001be4:	40021000 	.word	0x40021000
 8001be8:	40021400 	.word	0x40021400
 8001bec:	40021800 	.word	0x40021800
 8001bf0:	40021c00 	.word	0x40021c00
 8001bf4:	40013c00 	.word	0x40013c00

08001bf8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b085      	sub	sp, #20
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
 8001c00:	460b      	mov	r3, r1
 8001c02:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	691a      	ldr	r2, [r3, #16]
 8001c08:	887b      	ldrh	r3, [r7, #2]
 8001c0a:	4013      	ands	r3, r2
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c10:	2301      	movs	r3, #1
 8001c12:	73fb      	strb	r3, [r7, #15]
 8001c14:	e001      	b.n	8001c1a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c16:	2300      	movs	r3, #0
 8001c18:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	3714      	adds	r7, #20
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	460b      	mov	r3, r1
 8001c32:	807b      	strh	r3, [r7, #2]
 8001c34:	4613      	mov	r3, r2
 8001c36:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c38:	787b      	ldrb	r3, [r7, #1]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d003      	beq.n	8001c46 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c3e:	887a      	ldrh	r2, [r7, #2]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c44:	e003      	b.n	8001c4e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c46:	887b      	ldrh	r3, [r7, #2]
 8001c48:	041a      	lsls	r2, r3, #16
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	619a      	str	r2, [r3, #24]
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
	...

08001c5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d101      	bne.n	8001c6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e25b      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d075      	beq.n	8001d66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c7a:	4ba3      	ldr	r3, [pc, #652]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	f003 030c 	and.w	r3, r3, #12
 8001c82:	2b04      	cmp	r3, #4
 8001c84:	d00c      	beq.n	8001ca0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c86:	4ba0      	ldr	r3, [pc, #640]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001c8e:	2b08      	cmp	r3, #8
 8001c90:	d112      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001c92:	4b9d      	ldr	r3, [pc, #628]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c9e:	d10b      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ca0:	4b99      	ldr	r3, [pc, #612]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d05b      	beq.n	8001d64 <HAL_RCC_OscConfig+0x108>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d157      	bne.n	8001d64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e236      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc0:	d106      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x74>
 8001cc2:	4b91      	ldr	r3, [pc, #580]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a90      	ldr	r2, [pc, #576]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	e01d      	b.n	8001d0c <HAL_RCC_OscConfig+0xb0>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cd8:	d10c      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x98>
 8001cda:	4b8b      	ldr	r3, [pc, #556]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a8a      	ldr	r2, [pc, #552]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ce0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ce4:	6013      	str	r3, [r2, #0]
 8001ce6:	4b88      	ldr	r3, [pc, #544]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4a87      	ldr	r2, [pc, #540]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf0:	6013      	str	r3, [r2, #0]
 8001cf2:	e00b      	b.n	8001d0c <HAL_RCC_OscConfig+0xb0>
 8001cf4:	4b84      	ldr	r3, [pc, #528]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a83      	ldr	r2, [pc, #524]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfe:	6013      	str	r3, [r2, #0]
 8001d00:	4b81      	ldr	r3, [pc, #516]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a80      	ldr	r2, [pc, #512]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d013      	beq.n	8001d3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d14:	f7ff f9a6 	bl	8001064 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d1c:	f7ff f9a2 	bl	8001064 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b64      	cmp	r3, #100	; 0x64
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e1fb      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d2e:	4b76      	ldr	r3, [pc, #472]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d0f0      	beq.n	8001d1c <HAL_RCC_OscConfig+0xc0>
 8001d3a:	e014      	b.n	8001d66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d3c:	f7ff f992 	bl	8001064 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d44:	f7ff f98e 	bl	8001064 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b64      	cmp	r3, #100	; 0x64
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e1e7      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d56:	4b6c      	ldr	r3, [pc, #432]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d1f0      	bne.n	8001d44 <HAL_RCC_OscConfig+0xe8>
 8001d62:	e000      	b.n	8001d66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0302 	and.w	r3, r3, #2
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d063      	beq.n	8001e3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d72:	4b65      	ldr	r3, [pc, #404]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d74:	689b      	ldr	r3, [r3, #8]
 8001d76:	f003 030c 	and.w	r3, r3, #12
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00b      	beq.n	8001d96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d7e:	4b62      	ldr	r3, [pc, #392]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001d86:	2b08      	cmp	r3, #8
 8001d88:	d11c      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001d8a:	4b5f      	ldr	r3, [pc, #380]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d116      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d96:	4b5c      	ldr	r3, [pc, #368]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d005      	beq.n	8001dae <HAL_RCC_OscConfig+0x152>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d001      	beq.n	8001dae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e1bb      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	691b      	ldr	r3, [r3, #16]
 8001dba:	00db      	lsls	r3, r3, #3
 8001dbc:	4952      	ldr	r1, [pc, #328]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc2:	e03a      	b.n	8001e3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d020      	beq.n	8001e0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dcc:	4b4f      	ldr	r3, [pc, #316]	; (8001f0c <HAL_RCC_OscConfig+0x2b0>)
 8001dce:	2201      	movs	r2, #1
 8001dd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd2:	f7ff f947 	bl	8001064 <HAL_GetTick>
 8001dd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dd8:	e008      	b.n	8001dec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001dda:	f7ff f943 	bl	8001064 <HAL_GetTick>
 8001dde:	4602      	mov	r2, r0
 8001de0:	693b      	ldr	r3, [r7, #16]
 8001de2:	1ad3      	subs	r3, r2, r3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d901      	bls.n	8001dec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001de8:	2303      	movs	r3, #3
 8001dea:	e19c      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dec:	4b46      	ldr	r3, [pc, #280]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0302 	and.w	r3, r3, #2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f0      	beq.n	8001dda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	4b43      	ldr	r3, [pc, #268]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	691b      	ldr	r3, [r3, #16]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4940      	ldr	r1, [pc, #256]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	600b      	str	r3, [r1, #0]
 8001e0c:	e015      	b.n	8001e3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e0e:	4b3f      	ldr	r3, [pc, #252]	; (8001f0c <HAL_RCC_OscConfig+0x2b0>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f926 	bl	8001064 <HAL_GetTick>
 8001e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e1a:	e008      	b.n	8001e2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e1c:	f7ff f922 	bl	8001064 <HAL_GetTick>
 8001e20:	4602      	mov	r2, r0
 8001e22:	693b      	ldr	r3, [r7, #16]
 8001e24:	1ad3      	subs	r3, r2, r3
 8001e26:	2b02      	cmp	r3, #2
 8001e28:	d901      	bls.n	8001e2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001e2a:	2303      	movs	r3, #3
 8001e2c:	e17b      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e2e:	4b36      	ldr	r3, [pc, #216]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0302 	and.w	r3, r3, #2
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d1f0      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0308 	and.w	r3, r3, #8
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d030      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d016      	beq.n	8001e7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e4e:	4b30      	ldr	r3, [pc, #192]	; (8001f10 <HAL_RCC_OscConfig+0x2b4>)
 8001e50:	2201      	movs	r2, #1
 8001e52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e54:	f7ff f906 	bl	8001064 <HAL_GetTick>
 8001e58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e5c:	f7ff f902 	bl	8001064 <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e15b      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e6e:	4b26      	ldr	r3, [pc, #152]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e72:	f003 0302 	and.w	r3, r3, #2
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d0f0      	beq.n	8001e5c <HAL_RCC_OscConfig+0x200>
 8001e7a:	e015      	b.n	8001ea8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e7c:	4b24      	ldr	r3, [pc, #144]	; (8001f10 <HAL_RCC_OscConfig+0x2b4>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e82:	f7ff f8ef 	bl	8001064 <HAL_GetTick>
 8001e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e88:	e008      	b.n	8001e9c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e8a:	f7ff f8eb 	bl	8001064 <HAL_GetTick>
 8001e8e:	4602      	mov	r2, r0
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	1ad3      	subs	r3, r2, r3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d901      	bls.n	8001e9c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001e98:	2303      	movs	r3, #3
 8001e9a:	e144      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e9c:	4b1a      	ldr	r3, [pc, #104]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ea0:	f003 0302 	and.w	r3, r3, #2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d1f0      	bne.n	8001e8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	f003 0304 	and.w	r3, r3, #4
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	f000 80a0 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eba:	4b13      	ldr	r3, [pc, #76]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d10f      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	60bb      	str	r3, [r7, #8]
 8001eca:	4b0f      	ldr	r3, [pc, #60]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ed6:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_RCC_OscConfig+0x2ac>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	60bb      	str	r3, [r7, #8]
 8001ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ee6:	4b0b      	ldr	r3, [pc, #44]	; (8001f14 <HAL_RCC_OscConfig+0x2b8>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d121      	bne.n	8001f36 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ef2:	4b08      	ldr	r3, [pc, #32]	; (8001f14 <HAL_RCC_OscConfig+0x2b8>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a07      	ldr	r2, [pc, #28]	; (8001f14 <HAL_RCC_OscConfig+0x2b8>)
 8001ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001efe:	f7ff f8b1 	bl	8001064 <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f04:	e011      	b.n	8001f2a <HAL_RCC_OscConfig+0x2ce>
 8001f06:	bf00      	nop
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	42470000 	.word	0x42470000
 8001f10:	42470e80 	.word	0x42470e80
 8001f14:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f18:	f7ff f8a4 	bl	8001064 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d901      	bls.n	8001f2a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	e0fd      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	4b81      	ldr	r3, [pc, #516]	; (8002130 <HAL_RCC_OscConfig+0x4d4>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d0f0      	beq.n	8001f18 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	689b      	ldr	r3, [r3, #8]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d106      	bne.n	8001f4c <HAL_RCC_OscConfig+0x2f0>
 8001f3e:	4b7d      	ldr	r3, [pc, #500]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f42:	4a7c      	ldr	r2, [pc, #496]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	6713      	str	r3, [r2, #112]	; 0x70
 8001f4a:	e01c      	b.n	8001f86 <HAL_RCC_OscConfig+0x32a>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x312>
 8001f54:	4b77      	ldr	r3, [pc, #476]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f58:	4a76      	ldr	r2, [pc, #472]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6713      	str	r3, [r2, #112]	; 0x70
 8001f60:	4b74      	ldr	r3, [pc, #464]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f64:	4a73      	ldr	r2, [pc, #460]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6713      	str	r3, [r2, #112]	; 0x70
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0x32a>
 8001f6e:	4b71      	ldr	r3, [pc, #452]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f72:	4a70      	ldr	r2, [pc, #448]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6713      	str	r3, [r2, #112]	; 0x70
 8001f7a:	4b6e      	ldr	r3, [pc, #440]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001f7e:	4a6d      	ldr	r2, [pc, #436]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f8e:	f7ff f869 	bl	8001064 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff f865 	bl	8001064 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0bc      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	4b61      	ldr	r3, [pc, #388]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001fae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ee      	beq.n	8001f96 <HAL_RCC_OscConfig+0x33a>
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff f853 	bl	8001064 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff f84f 	bl	8001064 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e0a6      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	4b56      	ldr	r3, [pc, #344]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b52      	ldr	r3, [pc, #328]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a51      	ldr	r2, [pc, #324]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8092 	beq.w	8002124 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002000:	4b4c      	ldr	r3, [pc, #304]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d05c      	beq.n	80020c6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d141      	bne.n	8002098 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b48      	ldr	r3, [pc, #288]	; (8002138 <HAL_RCC_OscConfig+0x4dc>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff f823 	bl	8001064 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff f81f 	bl	8001064 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e078      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002034:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	69da      	ldr	r2, [r3, #28]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a1b      	ldr	r3, [r3, #32]
 8002048:	431a      	orrs	r2, r3
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204e:	019b      	lsls	r3, r3, #6
 8002050:	431a      	orrs	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002056:	085b      	lsrs	r3, r3, #1
 8002058:	3b01      	subs	r3, #1
 800205a:	041b      	lsls	r3, r3, #16
 800205c:	431a      	orrs	r2, r3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002062:	061b      	lsls	r3, r3, #24
 8002064:	4933      	ldr	r1, [pc, #204]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 8002066:	4313      	orrs	r3, r2
 8002068:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800206a:	4b33      	ldr	r3, [pc, #204]	; (8002138 <HAL_RCC_OscConfig+0x4dc>)
 800206c:	2201      	movs	r2, #1
 800206e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002070:	f7fe fff8 	bl	8001064 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002078:	f7fe fff4 	bl	8001064 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e04d      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800208a:	4b2a      	ldr	r3, [pc, #168]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x41c>
 8002096:	e045      	b.n	8002124 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002098:	4b27      	ldr	r3, [pc, #156]	; (8002138 <HAL_RCC_OscConfig+0x4dc>)
 800209a:	2200      	movs	r2, #0
 800209c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800209e:	f7fe ffe1 	bl	8001064 <HAL_GetTick>
 80020a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020a4:	e008      	b.n	80020b8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020a6:	f7fe ffdd 	bl	8001064 <HAL_GetTick>
 80020aa:	4602      	mov	r2, r0
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	1ad3      	subs	r3, r2, r3
 80020b0:	2b02      	cmp	r3, #2
 80020b2:	d901      	bls.n	80020b8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80020b4:	2303      	movs	r3, #3
 80020b6:	e036      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020b8:	4b1e      	ldr	r3, [pc, #120]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1f0      	bne.n	80020a6 <HAL_RCC_OscConfig+0x44a>
 80020c4:	e02e      	b.n	8002124 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	699b      	ldr	r3, [r3, #24]
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e029      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80020d2:	4b18      	ldr	r3, [pc, #96]	; (8002134 <HAL_RCC_OscConfig+0x4d8>)
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	69db      	ldr	r3, [r3, #28]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d11c      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020f0:	429a      	cmp	r2, r3
 80020f2:	d115      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80020f4:	68fa      	ldr	r2, [r7, #12]
 80020f6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80020fa:	4013      	ands	r3, r2
 80020fc:	687a      	ldr	r2, [r7, #4]
 80020fe:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002100:	4293      	cmp	r3, r2
 8002102:	d10d      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800210e:	429a      	cmp	r2, r3
 8002110:	d106      	bne.n	8002120 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800211c:	429a      	cmp	r2, r3
 800211e:	d001      	beq.n	8002124 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e000      	b.n	8002126 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40007000 	.word	0x40007000
 8002134:	40023800 	.word	0x40023800
 8002138:	42470060 	.word	0x42470060

0800213c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800213c:	b580      	push	{r7, lr}
 800213e:	b084      	sub	sp, #16
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	e0cc      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002150:	4b68      	ldr	r3, [pc, #416]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f003 030f 	and.w	r3, r3, #15
 8002158:	683a      	ldr	r2, [r7, #0]
 800215a:	429a      	cmp	r2, r3
 800215c:	d90c      	bls.n	8002178 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800215e:	4b65      	ldr	r3, [pc, #404]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002160:	683a      	ldr	r2, [r7, #0]
 8002162:	b2d2      	uxtb	r2, r2
 8002164:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002166:	4b63      	ldr	r3, [pc, #396]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 030f 	and.w	r3, r3, #15
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	429a      	cmp	r2, r3
 8002172:	d001      	beq.n	8002178 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002174:	2301      	movs	r3, #1
 8002176:	e0b8      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d020      	beq.n	80021c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f003 0304 	and.w	r3, r3, #4
 800218c:	2b00      	cmp	r3, #0
 800218e:	d005      	beq.n	800219c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002190:	4b59      	ldr	r3, [pc, #356]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	4a58      	ldr	r2, [pc, #352]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002196:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800219a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0308 	and.w	r3, r3, #8
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d005      	beq.n	80021b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80021a8:	4b53      	ldr	r3, [pc, #332]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	4a52      	ldr	r2, [pc, #328]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021ae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80021b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80021b4:	4b50      	ldr	r3, [pc, #320]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	494d      	ldr	r1, [pc, #308]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021c2:	4313      	orrs	r3, r2
 80021c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d044      	beq.n	800225c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d107      	bne.n	80021ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021da:	4b47      	ldr	r3, [pc, #284]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d119      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e6:	2301      	movs	r3, #1
 80021e8:	e07f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b02      	cmp	r3, #2
 80021f0:	d003      	beq.n	80021fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d107      	bne.n	800220a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021fa:	4b3f      	ldr	r3, [pc, #252]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e06f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800220a:	4b3b      	ldr	r3, [pc, #236]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d101      	bne.n	800221a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e067      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800221a:	4b37      	ldr	r3, [pc, #220]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f023 0203 	bic.w	r2, r3, #3
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	4934      	ldr	r1, [pc, #208]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002228:	4313      	orrs	r3, r2
 800222a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800222c:	f7fe ff1a 	bl	8001064 <HAL_GetTick>
 8002230:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002232:	e00a      	b.n	800224a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002234:	f7fe ff16 	bl	8001064 <HAL_GetTick>
 8002238:	4602      	mov	r2, r0
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	1ad3      	subs	r3, r2, r3
 800223e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e04f      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800224a:	4b2b      	ldr	r3, [pc, #172]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800224c:	689b      	ldr	r3, [r3, #8]
 800224e:	f003 020c 	and.w	r2, r3, #12
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	429a      	cmp	r2, r3
 800225a:	d1eb      	bne.n	8002234 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800225c:	4b25      	ldr	r3, [pc, #148]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f003 030f 	and.w	r3, r3, #15
 8002264:	683a      	ldr	r2, [r7, #0]
 8002266:	429a      	cmp	r2, r3
 8002268:	d20c      	bcs.n	8002284 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800226a:	4b22      	ldr	r3, [pc, #136]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	b2d2      	uxtb	r2, r2
 8002270:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002272:	4b20      	ldr	r3, [pc, #128]	; (80022f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 030f 	and.w	r3, r3, #15
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	429a      	cmp	r2, r3
 800227e:	d001      	beq.n	8002284 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e032      	b.n	80022ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	2b00      	cmp	r3, #0
 800228e:	d008      	beq.n	80022a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002292:	689b      	ldr	r3, [r3, #8]
 8002294:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	68db      	ldr	r3, [r3, #12]
 800229c:	4916      	ldr	r1, [pc, #88]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 800229e:	4313      	orrs	r3, r2
 80022a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0308 	and.w	r3, r3, #8
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d009      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80022ae:	4b12      	ldr	r3, [pc, #72]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	689b      	ldr	r3, [r3, #8]
 80022b2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691b      	ldr	r3, [r3, #16]
 80022ba:	00db      	lsls	r3, r3, #3
 80022bc:	490e      	ldr	r1, [pc, #56]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80022c2:	f000 f821 	bl	8002308 <HAL_RCC_GetSysClockFreq>
 80022c6:	4601      	mov	r1, r0
 80022c8:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	091b      	lsrs	r3, r3, #4
 80022ce:	f003 030f 	and.w	r3, r3, #15
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <HAL_RCC_ClockConfig+0x1c0>)
 80022d4:	5cd3      	ldrb	r3, [r2, r3]
 80022d6:	fa21 f303 	lsr.w	r3, r1, r3
 80022da:	4a09      	ldr	r2, [pc, #36]	; (8002300 <HAL_RCC_ClockConfig+0x1c4>)
 80022dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80022de:	4b09      	ldr	r3, [pc, #36]	; (8002304 <HAL_RCC_ClockConfig+0x1c8>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	4618      	mov	r0, r3
 80022e4:	f7fe fe7a 	bl	8000fdc <HAL_InitTick>

  return HAL_OK;
 80022e8:	2300      	movs	r3, #0
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3710      	adds	r7, #16
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40023c00 	.word	0x40023c00
 80022f8:	40023800 	.word	0x40023800
 80022fc:	08003abc 	.word	0x08003abc
 8002300:	20000008 	.word	0x20000008
 8002304:	2000000c 	.word	0x2000000c

08002308 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800230e:	2300      	movs	r3, #0
 8002310:	607b      	str	r3, [r7, #4]
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	2300      	movs	r3, #0
 8002318:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800231e:	4b63      	ldr	r3, [pc, #396]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002320:	689b      	ldr	r3, [r3, #8]
 8002322:	f003 030c 	and.w	r3, r3, #12
 8002326:	2b04      	cmp	r3, #4
 8002328:	d007      	beq.n	800233a <HAL_RCC_GetSysClockFreq+0x32>
 800232a:	2b08      	cmp	r3, #8
 800232c:	d008      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x38>
 800232e:	2b00      	cmp	r3, #0
 8002330:	f040 80b4 	bne.w	800249c <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002334:	4b5e      	ldr	r3, [pc, #376]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8002336:	60bb      	str	r3, [r7, #8]
       break;
 8002338:	e0b3      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800233a:	4b5e      	ldr	r3, [pc, #376]	; (80024b4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800233c:	60bb      	str	r3, [r7, #8]
      break;
 800233e:	e0b0      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002340:	4b5a      	ldr	r3, [pc, #360]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002348:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234a:	4b58      	ldr	r3, [pc, #352]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 800234c:	685b      	ldr	r3, [r3, #4]
 800234e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d04a      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002356:	4b55      	ldr	r3, [pc, #340]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002358:	685b      	ldr	r3, [r3, #4]
 800235a:	099b      	lsrs	r3, r3, #6
 800235c:	f04f 0400 	mov.w	r4, #0
 8002360:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002364:	f04f 0200 	mov.w	r2, #0
 8002368:	ea03 0501 	and.w	r5, r3, r1
 800236c:	ea04 0602 	and.w	r6, r4, r2
 8002370:	4629      	mov	r1, r5
 8002372:	4632      	mov	r2, r6
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	f04f 0400 	mov.w	r4, #0
 800237c:	0154      	lsls	r4, r2, #5
 800237e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002382:	014b      	lsls	r3, r1, #5
 8002384:	4619      	mov	r1, r3
 8002386:	4622      	mov	r2, r4
 8002388:	1b49      	subs	r1, r1, r5
 800238a:	eb62 0206 	sbc.w	r2, r2, r6
 800238e:	f04f 0300 	mov.w	r3, #0
 8002392:	f04f 0400 	mov.w	r4, #0
 8002396:	0194      	lsls	r4, r2, #6
 8002398:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800239c:	018b      	lsls	r3, r1, #6
 800239e:	1a5b      	subs	r3, r3, r1
 80023a0:	eb64 0402 	sbc.w	r4, r4, r2
 80023a4:	f04f 0100 	mov.w	r1, #0
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	00e2      	lsls	r2, r4, #3
 80023ae:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80023b2:	00d9      	lsls	r1, r3, #3
 80023b4:	460b      	mov	r3, r1
 80023b6:	4614      	mov	r4, r2
 80023b8:	195b      	adds	r3, r3, r5
 80023ba:	eb44 0406 	adc.w	r4, r4, r6
 80023be:	f04f 0100 	mov.w	r1, #0
 80023c2:	f04f 0200 	mov.w	r2, #0
 80023c6:	0262      	lsls	r2, r4, #9
 80023c8:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80023cc:	0259      	lsls	r1, r3, #9
 80023ce:	460b      	mov	r3, r1
 80023d0:	4614      	mov	r4, r2
 80023d2:	4618      	mov	r0, r3
 80023d4:	4621      	mov	r1, r4
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	f04f 0400 	mov.w	r4, #0
 80023dc:	461a      	mov	r2, r3
 80023de:	4623      	mov	r3, r4
 80023e0:	f7fd ff4e 	bl	8000280 <__aeabi_uldivmod>
 80023e4:	4603      	mov	r3, r0
 80023e6:	460c      	mov	r4, r1
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	e049      	b.n	8002480 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	099b      	lsrs	r3, r3, #6
 80023f2:	f04f 0400 	mov.w	r4, #0
 80023f6:	f240 11ff 	movw	r1, #511	; 0x1ff
 80023fa:	f04f 0200 	mov.w	r2, #0
 80023fe:	ea03 0501 	and.w	r5, r3, r1
 8002402:	ea04 0602 	and.w	r6, r4, r2
 8002406:	4629      	mov	r1, r5
 8002408:	4632      	mov	r2, r6
 800240a:	f04f 0300 	mov.w	r3, #0
 800240e:	f04f 0400 	mov.w	r4, #0
 8002412:	0154      	lsls	r4, r2, #5
 8002414:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002418:	014b      	lsls	r3, r1, #5
 800241a:	4619      	mov	r1, r3
 800241c:	4622      	mov	r2, r4
 800241e:	1b49      	subs	r1, r1, r5
 8002420:	eb62 0206 	sbc.w	r2, r2, r6
 8002424:	f04f 0300 	mov.w	r3, #0
 8002428:	f04f 0400 	mov.w	r4, #0
 800242c:	0194      	lsls	r4, r2, #6
 800242e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002432:	018b      	lsls	r3, r1, #6
 8002434:	1a5b      	subs	r3, r3, r1
 8002436:	eb64 0402 	sbc.w	r4, r4, r2
 800243a:	f04f 0100 	mov.w	r1, #0
 800243e:	f04f 0200 	mov.w	r2, #0
 8002442:	00e2      	lsls	r2, r4, #3
 8002444:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002448:	00d9      	lsls	r1, r3, #3
 800244a:	460b      	mov	r3, r1
 800244c:	4614      	mov	r4, r2
 800244e:	195b      	adds	r3, r3, r5
 8002450:	eb44 0406 	adc.w	r4, r4, r6
 8002454:	f04f 0100 	mov.w	r1, #0
 8002458:	f04f 0200 	mov.w	r2, #0
 800245c:	02a2      	lsls	r2, r4, #10
 800245e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002462:	0299      	lsls	r1, r3, #10
 8002464:	460b      	mov	r3, r1
 8002466:	4614      	mov	r4, r2
 8002468:	4618      	mov	r0, r3
 800246a:	4621      	mov	r1, r4
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	f04f 0400 	mov.w	r4, #0
 8002472:	461a      	mov	r2, r3
 8002474:	4623      	mov	r3, r4
 8002476:	f7fd ff03 	bl	8000280 <__aeabi_uldivmod>
 800247a:	4603      	mov	r3, r0
 800247c:	460c      	mov	r4, r1
 800247e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002480:	4b0a      	ldr	r3, [pc, #40]	; (80024ac <HAL_RCC_GetSysClockFreq+0x1a4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	0c1b      	lsrs	r3, r3, #16
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	3301      	adds	r3, #1
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002490:	68fa      	ldr	r2, [r7, #12]
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	fbb2 f3f3 	udiv	r3, r2, r3
 8002498:	60bb      	str	r3, [r7, #8]
      break;
 800249a:	e002      	b.n	80024a2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800249e:	60bb      	str	r3, [r7, #8]
      break;
 80024a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a2:	68bb      	ldr	r3, [r7, #8]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	3714      	adds	r7, #20
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ac:	40023800 	.word	0x40023800
 80024b0:	00f42400 	.word	0x00f42400
 80024b4:	007a1200 	.word	0x007a1200

080024b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024bc:	4b03      	ldr	r3, [pc, #12]	; (80024cc <HAL_RCC_GetHCLKFreq+0x14>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	20000008 	.word	0x20000008

080024d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80024d4:	f7ff fff0 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 80024d8:	4601      	mov	r1, r0
 80024da:	4b05      	ldr	r3, [pc, #20]	; (80024f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	0a9b      	lsrs	r3, r3, #10
 80024e0:	f003 0307 	and.w	r3, r3, #7
 80024e4:	4a03      	ldr	r2, [pc, #12]	; (80024f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024e6:	5cd3      	ldrb	r3, [r2, r3]
 80024e8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40023800 	.word	0x40023800
 80024f4:	08003acc 	.word	0x08003acc

080024f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80024fc:	f7ff ffdc 	bl	80024b8 <HAL_RCC_GetHCLKFreq>
 8002500:	4601      	mov	r1, r0
 8002502:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002504:	689b      	ldr	r3, [r3, #8]
 8002506:	0b5b      	lsrs	r3, r3, #13
 8002508:	f003 0307 	and.w	r3, r3, #7
 800250c:	4a03      	ldr	r2, [pc, #12]	; (800251c <HAL_RCC_GetPCLK2Freq+0x24>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002514:	4618      	mov	r0, r3
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40023800 	.word	0x40023800
 800251c:	08003acc 	.word	0x08003acc

08002520 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e03f      	b.n	80025b2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b00      	cmp	r3, #0
 800253c:	d106      	bne.n	800254c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f7fe fc04 	bl	8000d54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2224      	movs	r2, #36	; 0x24
 8002550:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	68da      	ldr	r2, [r3, #12]
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002562:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f9b1 	bl	80028cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	691a      	ldr	r2, [r3, #16]
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002578:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	695a      	ldr	r2, [r3, #20]
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002588:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002598:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2220      	movs	r2, #32
 80025a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3708      	adds	r7, #8
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80025ba:	b580      	push	{r7, lr}
 80025bc:	b088      	sub	sp, #32
 80025be:	af02      	add	r7, sp, #8
 80025c0:	60f8      	str	r0, [r7, #12]
 80025c2:	60b9      	str	r1, [r7, #8]
 80025c4:	603b      	str	r3, [r7, #0]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80025ca:	2300      	movs	r3, #0
 80025cc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b20      	cmp	r3, #32
 80025d8:	f040 8083 	bne.w	80026e2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d002      	beq.n	80025e8 <HAL_UART_Transmit+0x2e>
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d101      	bne.n	80025ec <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 80025e8:	2301      	movs	r3, #1
 80025ea:	e07b      	b.n	80026e4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80025f2:	2b01      	cmp	r3, #1
 80025f4:	d101      	bne.n	80025fa <HAL_UART_Transmit+0x40>
 80025f6:	2302      	movs	r3, #2
 80025f8:	e074      	b.n	80026e4 <HAL_UART_Transmit+0x12a>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2201      	movs	r2, #1
 80025fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2221      	movs	r2, #33	; 0x21
 800260c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002610:	f7fe fd28 	bl	8001064 <HAL_GetTick>
 8002614:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	88fa      	ldrh	r2, [r7, #6]
 800261a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	88fa      	ldrh	r2, [r7, #6]
 8002620:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800262a:	e042      	b.n	80026b2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002630:	b29b      	uxth	r3, r3
 8002632:	3b01      	subs	r3, #1
 8002634:	b29a      	uxth	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002642:	d122      	bne.n	800268a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	9300      	str	r3, [sp, #0]
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	2200      	movs	r2, #0
 800264c:	2180      	movs	r1, #128	; 0x80
 800264e:	68f8      	ldr	r0, [r7, #12]
 8002650:	f000 f8f2 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 8002654:	4603      	mov	r3, r0
 8002656:	2b00      	cmp	r3, #0
 8002658:	d001      	beq.n	800265e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800265a:	2303      	movs	r3, #3
 800265c:	e042      	b.n	80026e4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	881b      	ldrh	r3, [r3, #0]
 8002666:	461a      	mov	r2, r3
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002670:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	691b      	ldr	r3, [r3, #16]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d103      	bne.n	8002682 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3302      	adds	r3, #2
 800267e:	60bb      	str	r3, [r7, #8]
 8002680:	e017      	b.n	80026b2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	3301      	adds	r3, #1
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	e013      	b.n	80026b2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	2180      	movs	r1, #128	; 0x80
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 f8cf 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e01f      	b.n	80026e4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	60ba      	str	r2, [r7, #8]
 80026aa:	781a      	ldrb	r2, [r3, #0]
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d1b7      	bne.n	800262c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	9300      	str	r3, [sp, #0]
 80026c0:	697b      	ldr	r3, [r7, #20]
 80026c2:	2200      	movs	r2, #0
 80026c4:	2140      	movs	r1, #64	; 0x40
 80026c6:	68f8      	ldr	r0, [r7, #12]
 80026c8:	f000 f8b6 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e006      	b.n	80026e4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2220      	movs	r2, #32
 80026da:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 80026de:	2300      	movs	r3, #0
 80026e0:	e000      	b.n	80026e4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80026e2:	2302      	movs	r3, #2
  }
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3718      	adds	r7, #24
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b088      	sub	sp, #32
 80026f0:	af02      	add	r7, sp, #8
 80026f2:	60f8      	str	r0, [r7, #12]
 80026f4:	60b9      	str	r1, [r7, #8]
 80026f6:	603b      	str	r3, [r7, #0]
 80026f8:	4613      	mov	r3, r2
 80026fa:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002706:	b2db      	uxtb	r3, r3
 8002708:	2b20      	cmp	r3, #32
 800270a:	f040 8090 	bne.w	800282e <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d002      	beq.n	800271a <HAL_UART_Receive+0x2e>
 8002714:	88fb      	ldrh	r3, [r7, #6]
 8002716:	2b00      	cmp	r3, #0
 8002718:	d101      	bne.n	800271e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e088      	b.n	8002830 <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_UART_Receive+0x40>
 8002728:	2302      	movs	r3, #2
 800272a:	e081      	b.n	8002830 <HAL_UART_Receive+0x144>
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	2200      	movs	r2, #0
 8002738:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	2222      	movs	r2, #34	; 0x22
 800273e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002742:	f7fe fc8f 	bl	8001064 <HAL_GetTick>
 8002746:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	88fa      	ldrh	r2, [r7, #6]
 800274c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	88fa      	ldrh	r2, [r7, #6]
 8002752:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800275c:	e05c      	b.n	8002818 <HAL_UART_Receive+0x12c>
    {
      huart->RxXferCount--;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002762:	b29b      	uxth	r3, r3
 8002764:	3b01      	subs	r3, #1
 8002766:	b29a      	uxth	r2, r3
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	689b      	ldr	r3, [r3, #8]
 8002770:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002774:	d12b      	bne.n	80027ce <HAL_UART_Receive+0xe2>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	2200      	movs	r2, #0
 800277e:	2120      	movs	r1, #32
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f000 f859 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d001      	beq.n	8002790 <HAL_UART_Receive+0xa4>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e04f      	b.n	8002830 <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d10c      	bne.n	80027b6 <HAL_UART_Receive+0xca>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80027a8:	b29a      	uxth	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	3302      	adds	r3, #2
 80027b2:	60bb      	str	r3, [r7, #8]
 80027b4:	e030      	b.n	8002818 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	b29b      	uxth	r3, r3
 80027be:	b2db      	uxtb	r3, r3
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	3301      	adds	r3, #1
 80027ca:	60bb      	str	r3, [r7, #8]
 80027cc:	e024      	b.n	8002818 <HAL_UART_Receive+0x12c>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	9300      	str	r3, [sp, #0]
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	2200      	movs	r2, #0
 80027d6:	2120      	movs	r1, #32
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f82d 	bl	8002838 <UART_WaitOnFlagUntilTimeout>
 80027de:	4603      	mov	r3, r0
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d001      	beq.n	80027e8 <HAL_UART_Receive+0xfc>
        {
          return HAL_TIMEOUT;
 80027e4:	2303      	movs	r3, #3
 80027e6:	e023      	b.n	8002830 <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d108      	bne.n	8002802 <HAL_UART_Receive+0x116>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	6859      	ldr	r1, [r3, #4]
 80027f6:	68bb      	ldr	r3, [r7, #8]
 80027f8:	1c5a      	adds	r2, r3, #1
 80027fa:	60ba      	str	r2, [r7, #8]
 80027fc:	b2ca      	uxtb	r2, r1
 80027fe:	701a      	strb	r2, [r3, #0]
 8002800:	e00a      	b.n	8002818 <HAL_UART_Receive+0x12c>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	b2da      	uxtb	r2, r3
 800280a:	68bb      	ldr	r3, [r7, #8]
 800280c:	1c59      	adds	r1, r3, #1
 800280e:	60b9      	str	r1, [r7, #8]
 8002810:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002814:	b2d2      	uxtb	r2, r2
 8002816:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800281c:	b29b      	uxth	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d19d      	bne.n	800275e <HAL_UART_Receive+0x72>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2220      	movs	r2, #32
 8002826:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    return HAL_OK;
 800282a:	2300      	movs	r3, #0
 800282c:	e000      	b.n	8002830 <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 800282e:	2302      	movs	r3, #2
  }
}
 8002830:	4618      	mov	r0, r3
 8002832:	3718      	adds	r7, #24
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b084      	sub	sp, #16
 800283c:	af00      	add	r7, sp, #0
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	60b9      	str	r1, [r7, #8]
 8002842:	603b      	str	r3, [r7, #0]
 8002844:	4613      	mov	r3, r2
 8002846:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002848:	e02c      	b.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800284a:	69bb      	ldr	r3, [r7, #24]
 800284c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002850:	d028      	beq.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002852:	69bb      	ldr	r3, [r7, #24]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d007      	beq.n	8002868 <UART_WaitOnFlagUntilTimeout+0x30>
 8002858:	f7fe fc04 	bl	8001064 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	429a      	cmp	r2, r3
 8002866:	d21d      	bcs.n	80028a4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68da      	ldr	r2, [r3, #12]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002876:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f022 0201 	bic.w	r2, r2, #1
 8002886:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	2220      	movs	r2, #32
 800288c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	2220      	movs	r2, #32
 8002894:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	2200      	movs	r2, #0
 800289c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80028a0:	2303      	movs	r3, #3
 80028a2:	e00f      	b.n	80028c4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028a4:	68fb      	ldr	r3, [r7, #12]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	681a      	ldr	r2, [r3, #0]
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	4013      	ands	r3, r2
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	bf0c      	ite	eq
 80028b4:	2301      	moveq	r3, #1
 80028b6:	2300      	movne	r3, #0
 80028b8:	b2db      	uxtb	r3, r3
 80028ba:	461a      	mov	r2, r3
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	429a      	cmp	r2, r3
 80028c0:	d0c3      	beq.n	800284a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028c2:	2300      	movs	r3, #0
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80028cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028d0:	b085      	sub	sp, #20
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	68da      	ldr	r2, [r3, #12]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	430a      	orrs	r2, r1
 80028ea:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689a      	ldr	r2, [r3, #8]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	695b      	ldr	r3, [r3, #20]
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	69db      	ldr	r3, [r3, #28]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800290e:	f023 030c 	bic.w	r3, r3, #12
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	68f9      	ldr	r1, [r7, #12]
 8002918:	430b      	orrs	r3, r1
 800291a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	695b      	ldr	r3, [r3, #20]
 8002922:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	699a      	ldr	r2, [r3, #24]
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69db      	ldr	r3, [r3, #28]
 8002936:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800293a:	f040 818b 	bne.w	8002c54 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4ac1      	ldr	r2, [pc, #772]	; (8002c48 <UART_SetConfig+0x37c>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d005      	beq.n	8002954 <UART_SetConfig+0x88>
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4abf      	ldr	r2, [pc, #764]	; (8002c4c <UART_SetConfig+0x380>)
 800294e:	4293      	cmp	r3, r2
 8002950:	f040 80bd 	bne.w	8002ace <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002954:	f7ff fdd0 	bl	80024f8 <HAL_RCC_GetPCLK2Freq>
 8002958:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800295a:	68bb      	ldr	r3, [r7, #8]
 800295c:	461d      	mov	r5, r3
 800295e:	f04f 0600 	mov.w	r6, #0
 8002962:	46a8      	mov	r8, r5
 8002964:	46b1      	mov	r9, r6
 8002966:	eb18 0308 	adds.w	r3, r8, r8
 800296a:	eb49 0409 	adc.w	r4, r9, r9
 800296e:	4698      	mov	r8, r3
 8002970:	46a1      	mov	r9, r4
 8002972:	eb18 0805 	adds.w	r8, r8, r5
 8002976:	eb49 0906 	adc.w	r9, r9, r6
 800297a:	f04f 0100 	mov.w	r1, #0
 800297e:	f04f 0200 	mov.w	r2, #0
 8002982:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002986:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800298a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800298e:	4688      	mov	r8, r1
 8002990:	4691      	mov	r9, r2
 8002992:	eb18 0005 	adds.w	r0, r8, r5
 8002996:	eb49 0106 	adc.w	r1, r9, r6
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	461d      	mov	r5, r3
 80029a0:	f04f 0600 	mov.w	r6, #0
 80029a4:	196b      	adds	r3, r5, r5
 80029a6:	eb46 0406 	adc.w	r4, r6, r6
 80029aa:	461a      	mov	r2, r3
 80029ac:	4623      	mov	r3, r4
 80029ae:	f7fd fc67 	bl	8000280 <__aeabi_uldivmod>
 80029b2:	4603      	mov	r3, r0
 80029b4:	460c      	mov	r4, r1
 80029b6:	461a      	mov	r2, r3
 80029b8:	4ba5      	ldr	r3, [pc, #660]	; (8002c50 <UART_SetConfig+0x384>)
 80029ba:	fba3 2302 	umull	r2, r3, r3, r2
 80029be:	095b      	lsrs	r3, r3, #5
 80029c0:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	461d      	mov	r5, r3
 80029c8:	f04f 0600 	mov.w	r6, #0
 80029cc:	46a9      	mov	r9, r5
 80029ce:	46b2      	mov	sl, r6
 80029d0:	eb19 0309 	adds.w	r3, r9, r9
 80029d4:	eb4a 040a 	adc.w	r4, sl, sl
 80029d8:	4699      	mov	r9, r3
 80029da:	46a2      	mov	sl, r4
 80029dc:	eb19 0905 	adds.w	r9, r9, r5
 80029e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80029e4:	f04f 0100 	mov.w	r1, #0
 80029e8:	f04f 0200 	mov.w	r2, #0
 80029ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80029f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80029f8:	4689      	mov	r9, r1
 80029fa:	4692      	mov	sl, r2
 80029fc:	eb19 0005 	adds.w	r0, r9, r5
 8002a00:	eb4a 0106 	adc.w	r1, sl, r6
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	461d      	mov	r5, r3
 8002a0a:	f04f 0600 	mov.w	r6, #0
 8002a0e:	196b      	adds	r3, r5, r5
 8002a10:	eb46 0406 	adc.w	r4, r6, r6
 8002a14:	461a      	mov	r2, r3
 8002a16:	4623      	mov	r3, r4
 8002a18:	f7fd fc32 	bl	8000280 <__aeabi_uldivmod>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	460c      	mov	r4, r1
 8002a20:	461a      	mov	r2, r3
 8002a22:	4b8b      	ldr	r3, [pc, #556]	; (8002c50 <UART_SetConfig+0x384>)
 8002a24:	fba3 1302 	umull	r1, r3, r3, r2
 8002a28:	095b      	lsrs	r3, r3, #5
 8002a2a:	2164      	movs	r1, #100	; 0x64
 8002a2c:	fb01 f303 	mul.w	r3, r1, r3
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	00db      	lsls	r3, r3, #3
 8002a34:	3332      	adds	r3, #50	; 0x32
 8002a36:	4a86      	ldr	r2, [pc, #536]	; (8002c50 <UART_SetConfig+0x384>)
 8002a38:	fba2 2303 	umull	r2, r3, r2, r3
 8002a3c:	095b      	lsrs	r3, r3, #5
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002a44:	4498      	add	r8, r3
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	461d      	mov	r5, r3
 8002a4a:	f04f 0600 	mov.w	r6, #0
 8002a4e:	46a9      	mov	r9, r5
 8002a50:	46b2      	mov	sl, r6
 8002a52:	eb19 0309 	adds.w	r3, r9, r9
 8002a56:	eb4a 040a 	adc.w	r4, sl, sl
 8002a5a:	4699      	mov	r9, r3
 8002a5c:	46a2      	mov	sl, r4
 8002a5e:	eb19 0905 	adds.w	r9, r9, r5
 8002a62:	eb4a 0a06 	adc.w	sl, sl, r6
 8002a66:	f04f 0100 	mov.w	r1, #0
 8002a6a:	f04f 0200 	mov.w	r2, #0
 8002a6e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002a72:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002a76:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002a7a:	4689      	mov	r9, r1
 8002a7c:	4692      	mov	sl, r2
 8002a7e:	eb19 0005 	adds.w	r0, r9, r5
 8002a82:	eb4a 0106 	adc.w	r1, sl, r6
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	461d      	mov	r5, r3
 8002a8c:	f04f 0600 	mov.w	r6, #0
 8002a90:	196b      	adds	r3, r5, r5
 8002a92:	eb46 0406 	adc.w	r4, r6, r6
 8002a96:	461a      	mov	r2, r3
 8002a98:	4623      	mov	r3, r4
 8002a9a:	f7fd fbf1 	bl	8000280 <__aeabi_uldivmod>
 8002a9e:	4603      	mov	r3, r0
 8002aa0:	460c      	mov	r4, r1
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	4b6a      	ldr	r3, [pc, #424]	; (8002c50 <UART_SetConfig+0x384>)
 8002aa6:	fba3 1302 	umull	r1, r3, r3, r2
 8002aaa:	095b      	lsrs	r3, r3, #5
 8002aac:	2164      	movs	r1, #100	; 0x64
 8002aae:	fb01 f303 	mul.w	r3, r1, r3
 8002ab2:	1ad3      	subs	r3, r2, r3
 8002ab4:	00db      	lsls	r3, r3, #3
 8002ab6:	3332      	adds	r3, #50	; 0x32
 8002ab8:	4a65      	ldr	r2, [pc, #404]	; (8002c50 <UART_SetConfig+0x384>)
 8002aba:	fba2 2303 	umull	r2, r3, r2, r3
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	f003 0207 	and.w	r2, r3, #7
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4442      	add	r2, r8
 8002aca:	609a      	str	r2, [r3, #8]
 8002acc:	e26f      	b.n	8002fae <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002ace:	f7ff fcff 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 8002ad2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	461d      	mov	r5, r3
 8002ad8:	f04f 0600 	mov.w	r6, #0
 8002adc:	46a8      	mov	r8, r5
 8002ade:	46b1      	mov	r9, r6
 8002ae0:	eb18 0308 	adds.w	r3, r8, r8
 8002ae4:	eb49 0409 	adc.w	r4, r9, r9
 8002ae8:	4698      	mov	r8, r3
 8002aea:	46a1      	mov	r9, r4
 8002aec:	eb18 0805 	adds.w	r8, r8, r5
 8002af0:	eb49 0906 	adc.w	r9, r9, r6
 8002af4:	f04f 0100 	mov.w	r1, #0
 8002af8:	f04f 0200 	mov.w	r2, #0
 8002afc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002b00:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002b04:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002b08:	4688      	mov	r8, r1
 8002b0a:	4691      	mov	r9, r2
 8002b0c:	eb18 0005 	adds.w	r0, r8, r5
 8002b10:	eb49 0106 	adc.w	r1, r9, r6
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	461d      	mov	r5, r3
 8002b1a:	f04f 0600 	mov.w	r6, #0
 8002b1e:	196b      	adds	r3, r5, r5
 8002b20:	eb46 0406 	adc.w	r4, r6, r6
 8002b24:	461a      	mov	r2, r3
 8002b26:	4623      	mov	r3, r4
 8002b28:	f7fd fbaa 	bl	8000280 <__aeabi_uldivmod>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	460c      	mov	r4, r1
 8002b30:	461a      	mov	r2, r3
 8002b32:	4b47      	ldr	r3, [pc, #284]	; (8002c50 <UART_SetConfig+0x384>)
 8002b34:	fba3 2302 	umull	r2, r3, r3, r2
 8002b38:	095b      	lsrs	r3, r3, #5
 8002b3a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	461d      	mov	r5, r3
 8002b42:	f04f 0600 	mov.w	r6, #0
 8002b46:	46a9      	mov	r9, r5
 8002b48:	46b2      	mov	sl, r6
 8002b4a:	eb19 0309 	adds.w	r3, r9, r9
 8002b4e:	eb4a 040a 	adc.w	r4, sl, sl
 8002b52:	4699      	mov	r9, r3
 8002b54:	46a2      	mov	sl, r4
 8002b56:	eb19 0905 	adds.w	r9, r9, r5
 8002b5a:	eb4a 0a06 	adc.w	sl, sl, r6
 8002b5e:	f04f 0100 	mov.w	r1, #0
 8002b62:	f04f 0200 	mov.w	r2, #0
 8002b66:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002b6a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002b6e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002b72:	4689      	mov	r9, r1
 8002b74:	4692      	mov	sl, r2
 8002b76:	eb19 0005 	adds.w	r0, r9, r5
 8002b7a:	eb4a 0106 	adc.w	r1, sl, r6
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	685b      	ldr	r3, [r3, #4]
 8002b82:	461d      	mov	r5, r3
 8002b84:	f04f 0600 	mov.w	r6, #0
 8002b88:	196b      	adds	r3, r5, r5
 8002b8a:	eb46 0406 	adc.w	r4, r6, r6
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4623      	mov	r3, r4
 8002b92:	f7fd fb75 	bl	8000280 <__aeabi_uldivmod>
 8002b96:	4603      	mov	r3, r0
 8002b98:	460c      	mov	r4, r1
 8002b9a:	461a      	mov	r2, r3
 8002b9c:	4b2c      	ldr	r3, [pc, #176]	; (8002c50 <UART_SetConfig+0x384>)
 8002b9e:	fba3 1302 	umull	r1, r3, r3, r2
 8002ba2:	095b      	lsrs	r3, r3, #5
 8002ba4:	2164      	movs	r1, #100	; 0x64
 8002ba6:	fb01 f303 	mul.w	r3, r1, r3
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	00db      	lsls	r3, r3, #3
 8002bae:	3332      	adds	r3, #50	; 0x32
 8002bb0:	4a27      	ldr	r2, [pc, #156]	; (8002c50 <UART_SetConfig+0x384>)
 8002bb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002bb6:	095b      	lsrs	r3, r3, #5
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002bbe:	4498      	add	r8, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	461d      	mov	r5, r3
 8002bc4:	f04f 0600 	mov.w	r6, #0
 8002bc8:	46a9      	mov	r9, r5
 8002bca:	46b2      	mov	sl, r6
 8002bcc:	eb19 0309 	adds.w	r3, r9, r9
 8002bd0:	eb4a 040a 	adc.w	r4, sl, sl
 8002bd4:	4699      	mov	r9, r3
 8002bd6:	46a2      	mov	sl, r4
 8002bd8:	eb19 0905 	adds.w	r9, r9, r5
 8002bdc:	eb4a 0a06 	adc.w	sl, sl, r6
 8002be0:	f04f 0100 	mov.w	r1, #0
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002bec:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002bf0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002bf4:	4689      	mov	r9, r1
 8002bf6:	4692      	mov	sl, r2
 8002bf8:	eb19 0005 	adds.w	r0, r9, r5
 8002bfc:	eb4a 0106 	adc.w	r1, sl, r6
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	461d      	mov	r5, r3
 8002c06:	f04f 0600 	mov.w	r6, #0
 8002c0a:	196b      	adds	r3, r5, r5
 8002c0c:	eb46 0406 	adc.w	r4, r6, r6
 8002c10:	461a      	mov	r2, r3
 8002c12:	4623      	mov	r3, r4
 8002c14:	f7fd fb34 	bl	8000280 <__aeabi_uldivmod>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	460c      	mov	r4, r1
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <UART_SetConfig+0x384>)
 8002c20:	fba3 1302 	umull	r1, r3, r3, r2
 8002c24:	095b      	lsrs	r3, r3, #5
 8002c26:	2164      	movs	r1, #100	; 0x64
 8002c28:	fb01 f303 	mul.w	r3, r1, r3
 8002c2c:	1ad3      	subs	r3, r2, r3
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	3332      	adds	r3, #50	; 0x32
 8002c32:	4a07      	ldr	r2, [pc, #28]	; (8002c50 <UART_SetConfig+0x384>)
 8002c34:	fba2 2303 	umull	r2, r3, r2, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	f003 0207 	and.w	r2, r3, #7
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4442      	add	r2, r8
 8002c44:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8002c46:	e1b2      	b.n	8002fae <UART_SetConfig+0x6e2>
 8002c48:	40011000 	.word	0x40011000
 8002c4c:	40011400 	.word	0x40011400
 8002c50:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4ad7      	ldr	r2, [pc, #860]	; (8002fb8 <UART_SetConfig+0x6ec>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d005      	beq.n	8002c6a <UART_SetConfig+0x39e>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4ad6      	ldr	r2, [pc, #856]	; (8002fbc <UART_SetConfig+0x6f0>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	f040 80d1 	bne.w	8002e0c <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c6a:	f7ff fc45 	bl	80024f8 <HAL_RCC_GetPCLK2Freq>
 8002c6e:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002c70:	68bb      	ldr	r3, [r7, #8]
 8002c72:	469a      	mov	sl, r3
 8002c74:	f04f 0b00 	mov.w	fp, #0
 8002c78:	46d0      	mov	r8, sl
 8002c7a:	46d9      	mov	r9, fp
 8002c7c:	eb18 0308 	adds.w	r3, r8, r8
 8002c80:	eb49 0409 	adc.w	r4, r9, r9
 8002c84:	4698      	mov	r8, r3
 8002c86:	46a1      	mov	r9, r4
 8002c88:	eb18 080a 	adds.w	r8, r8, sl
 8002c8c:	eb49 090b 	adc.w	r9, r9, fp
 8002c90:	f04f 0100 	mov.w	r1, #0
 8002c94:	f04f 0200 	mov.w	r2, #0
 8002c98:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002c9c:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002ca0:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002ca4:	4688      	mov	r8, r1
 8002ca6:	4691      	mov	r9, r2
 8002ca8:	eb1a 0508 	adds.w	r5, sl, r8
 8002cac:	eb4b 0609 	adc.w	r6, fp, r9
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	f04f 0200 	mov.w	r2, #0
 8002cba:	f04f 0300 	mov.w	r3, #0
 8002cbe:	f04f 0400 	mov.w	r4, #0
 8002cc2:	0094      	lsls	r4, r2, #2
 8002cc4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002cc8:	008b      	lsls	r3, r1, #2
 8002cca:	461a      	mov	r2, r3
 8002ccc:	4623      	mov	r3, r4
 8002cce:	4628      	mov	r0, r5
 8002cd0:	4631      	mov	r1, r6
 8002cd2:	f7fd fad5 	bl	8000280 <__aeabi_uldivmod>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	460c      	mov	r4, r1
 8002cda:	461a      	mov	r2, r3
 8002cdc:	4bb8      	ldr	r3, [pc, #736]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002cde:	fba3 2302 	umull	r2, r3, r3, r2
 8002ce2:	095b      	lsrs	r3, r3, #5
 8002ce4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002ce8:	68bb      	ldr	r3, [r7, #8]
 8002cea:	469b      	mov	fp, r3
 8002cec:	f04f 0c00 	mov.w	ip, #0
 8002cf0:	46d9      	mov	r9, fp
 8002cf2:	46e2      	mov	sl, ip
 8002cf4:	eb19 0309 	adds.w	r3, r9, r9
 8002cf8:	eb4a 040a 	adc.w	r4, sl, sl
 8002cfc:	4699      	mov	r9, r3
 8002cfe:	46a2      	mov	sl, r4
 8002d00:	eb19 090b 	adds.w	r9, r9, fp
 8002d04:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d08:	f04f 0100 	mov.w	r1, #0
 8002d0c:	f04f 0200 	mov.w	r2, #0
 8002d10:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d14:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002d18:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002d1c:	4689      	mov	r9, r1
 8002d1e:	4692      	mov	sl, r2
 8002d20:	eb1b 0509 	adds.w	r5, fp, r9
 8002d24:	eb4c 060a 	adc.w	r6, ip, sl
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	4619      	mov	r1, r3
 8002d2e:	f04f 0200 	mov.w	r2, #0
 8002d32:	f04f 0300 	mov.w	r3, #0
 8002d36:	f04f 0400 	mov.w	r4, #0
 8002d3a:	0094      	lsls	r4, r2, #2
 8002d3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002d40:	008b      	lsls	r3, r1, #2
 8002d42:	461a      	mov	r2, r3
 8002d44:	4623      	mov	r3, r4
 8002d46:	4628      	mov	r0, r5
 8002d48:	4631      	mov	r1, r6
 8002d4a:	f7fd fa99 	bl	8000280 <__aeabi_uldivmod>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	460c      	mov	r4, r1
 8002d52:	461a      	mov	r2, r3
 8002d54:	4b9a      	ldr	r3, [pc, #616]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002d56:	fba3 1302 	umull	r1, r3, r3, r2
 8002d5a:	095b      	lsrs	r3, r3, #5
 8002d5c:	2164      	movs	r1, #100	; 0x64
 8002d5e:	fb01 f303 	mul.w	r3, r1, r3
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	3332      	adds	r3, #50	; 0x32
 8002d68:	4a95      	ldr	r2, [pc, #596]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d6e:	095b      	lsrs	r3, r3, #5
 8002d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002d74:	4498      	add	r8, r3
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	469b      	mov	fp, r3
 8002d7a:	f04f 0c00 	mov.w	ip, #0
 8002d7e:	46d9      	mov	r9, fp
 8002d80:	46e2      	mov	sl, ip
 8002d82:	eb19 0309 	adds.w	r3, r9, r9
 8002d86:	eb4a 040a 	adc.w	r4, sl, sl
 8002d8a:	4699      	mov	r9, r3
 8002d8c:	46a2      	mov	sl, r4
 8002d8e:	eb19 090b 	adds.w	r9, r9, fp
 8002d92:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002d96:	f04f 0100 	mov.w	r1, #0
 8002d9a:	f04f 0200 	mov.w	r2, #0
 8002d9e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002da2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002da6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002daa:	4689      	mov	r9, r1
 8002dac:	4692      	mov	sl, r2
 8002dae:	eb1b 0509 	adds.w	r5, fp, r9
 8002db2:	eb4c 060a 	adc.w	r6, ip, sl
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	4619      	mov	r1, r3
 8002dbc:	f04f 0200 	mov.w	r2, #0
 8002dc0:	f04f 0300 	mov.w	r3, #0
 8002dc4:	f04f 0400 	mov.w	r4, #0
 8002dc8:	0094      	lsls	r4, r2, #2
 8002dca:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002dce:	008b      	lsls	r3, r1, #2
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4623      	mov	r3, r4
 8002dd4:	4628      	mov	r0, r5
 8002dd6:	4631      	mov	r1, r6
 8002dd8:	f7fd fa52 	bl	8000280 <__aeabi_uldivmod>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	460c      	mov	r4, r1
 8002de0:	461a      	mov	r2, r3
 8002de2:	4b77      	ldr	r3, [pc, #476]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002de4:	fba3 1302 	umull	r1, r3, r3, r2
 8002de8:	095b      	lsrs	r3, r3, #5
 8002dea:	2164      	movs	r1, #100	; 0x64
 8002dec:	fb01 f303 	mul.w	r3, r1, r3
 8002df0:	1ad3      	subs	r3, r2, r3
 8002df2:	011b      	lsls	r3, r3, #4
 8002df4:	3332      	adds	r3, #50	; 0x32
 8002df6:	4a72      	ldr	r2, [pc, #456]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	095b      	lsrs	r3, r3, #5
 8002dfe:	f003 020f 	and.w	r2, r3, #15
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4442      	add	r2, r8
 8002e08:	609a      	str	r2, [r3, #8]
 8002e0a:	e0d0      	b.n	8002fae <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8002e0c:	f7ff fb60 	bl	80024d0 <HAL_RCC_GetPCLK1Freq>
 8002e10:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	469a      	mov	sl, r3
 8002e16:	f04f 0b00 	mov.w	fp, #0
 8002e1a:	46d0      	mov	r8, sl
 8002e1c:	46d9      	mov	r9, fp
 8002e1e:	eb18 0308 	adds.w	r3, r8, r8
 8002e22:	eb49 0409 	adc.w	r4, r9, r9
 8002e26:	4698      	mov	r8, r3
 8002e28:	46a1      	mov	r9, r4
 8002e2a:	eb18 080a 	adds.w	r8, r8, sl
 8002e2e:	eb49 090b 	adc.w	r9, r9, fp
 8002e32:	f04f 0100 	mov.w	r1, #0
 8002e36:	f04f 0200 	mov.w	r2, #0
 8002e3a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8002e3e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8002e42:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8002e46:	4688      	mov	r8, r1
 8002e48:	4691      	mov	r9, r2
 8002e4a:	eb1a 0508 	adds.w	r5, sl, r8
 8002e4e:	eb4b 0609 	adc.w	r6, fp, r9
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	4619      	mov	r1, r3
 8002e58:	f04f 0200 	mov.w	r2, #0
 8002e5c:	f04f 0300 	mov.w	r3, #0
 8002e60:	f04f 0400 	mov.w	r4, #0
 8002e64:	0094      	lsls	r4, r2, #2
 8002e66:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002e6a:	008b      	lsls	r3, r1, #2
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	4623      	mov	r3, r4
 8002e70:	4628      	mov	r0, r5
 8002e72:	4631      	mov	r1, r6
 8002e74:	f7fd fa04 	bl	8000280 <__aeabi_uldivmod>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	460c      	mov	r4, r1
 8002e7c:	461a      	mov	r2, r3
 8002e7e:	4b50      	ldr	r3, [pc, #320]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002e80:	fba3 2302 	umull	r2, r3, r3, r2
 8002e84:	095b      	lsrs	r3, r3, #5
 8002e86:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	469b      	mov	fp, r3
 8002e8e:	f04f 0c00 	mov.w	ip, #0
 8002e92:	46d9      	mov	r9, fp
 8002e94:	46e2      	mov	sl, ip
 8002e96:	eb19 0309 	adds.w	r3, r9, r9
 8002e9a:	eb4a 040a 	adc.w	r4, sl, sl
 8002e9e:	4699      	mov	r9, r3
 8002ea0:	46a2      	mov	sl, r4
 8002ea2:	eb19 090b 	adds.w	r9, r9, fp
 8002ea6:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002eaa:	f04f 0100 	mov.w	r1, #0
 8002eae:	f04f 0200 	mov.w	r2, #0
 8002eb2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002eb6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002eba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002ebe:	4689      	mov	r9, r1
 8002ec0:	4692      	mov	sl, r2
 8002ec2:	eb1b 0509 	adds.w	r5, fp, r9
 8002ec6:	eb4c 060a 	adc.w	r6, ip, sl
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	f04f 0300 	mov.w	r3, #0
 8002ed8:	f04f 0400 	mov.w	r4, #0
 8002edc:	0094      	lsls	r4, r2, #2
 8002ede:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002ee2:	008b      	lsls	r3, r1, #2
 8002ee4:	461a      	mov	r2, r3
 8002ee6:	4623      	mov	r3, r4
 8002ee8:	4628      	mov	r0, r5
 8002eea:	4631      	mov	r1, r6
 8002eec:	f7fd f9c8 	bl	8000280 <__aeabi_uldivmod>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	460c      	mov	r4, r1
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b32      	ldr	r3, [pc, #200]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	2164      	movs	r1, #100	; 0x64
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	3332      	adds	r3, #50	; 0x32
 8002f0a:	4a2d      	ldr	r2, [pc, #180]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f10:	095b      	lsrs	r3, r3, #5
 8002f12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002f16:	4498      	add	r8, r3
 8002f18:	68bb      	ldr	r3, [r7, #8]
 8002f1a:	469b      	mov	fp, r3
 8002f1c:	f04f 0c00 	mov.w	ip, #0
 8002f20:	46d9      	mov	r9, fp
 8002f22:	46e2      	mov	sl, ip
 8002f24:	eb19 0309 	adds.w	r3, r9, r9
 8002f28:	eb4a 040a 	adc.w	r4, sl, sl
 8002f2c:	4699      	mov	r9, r3
 8002f2e:	46a2      	mov	sl, r4
 8002f30:	eb19 090b 	adds.w	r9, r9, fp
 8002f34:	eb4a 0a0c 	adc.w	sl, sl, ip
 8002f38:	f04f 0100 	mov.w	r1, #0
 8002f3c:	f04f 0200 	mov.w	r2, #0
 8002f40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002f44:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8002f48:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8002f4c:	4689      	mov	r9, r1
 8002f4e:	4692      	mov	sl, r2
 8002f50:	eb1b 0509 	adds.w	r5, fp, r9
 8002f54:	eb4c 060a 	adc.w	r6, ip, sl
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	4619      	mov	r1, r3
 8002f5e:	f04f 0200 	mov.w	r2, #0
 8002f62:	f04f 0300 	mov.w	r3, #0
 8002f66:	f04f 0400 	mov.w	r4, #0
 8002f6a:	0094      	lsls	r4, r2, #2
 8002f6c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8002f70:	008b      	lsls	r3, r1, #2
 8002f72:	461a      	mov	r2, r3
 8002f74:	4623      	mov	r3, r4
 8002f76:	4628      	mov	r0, r5
 8002f78:	4631      	mov	r1, r6
 8002f7a:	f7fd f981 	bl	8000280 <__aeabi_uldivmod>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	460c      	mov	r4, r1
 8002f82:	461a      	mov	r2, r3
 8002f84:	4b0e      	ldr	r3, [pc, #56]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002f86:	fba3 1302 	umull	r1, r3, r3, r2
 8002f8a:	095b      	lsrs	r3, r3, #5
 8002f8c:	2164      	movs	r1, #100	; 0x64
 8002f8e:	fb01 f303 	mul.w	r3, r1, r3
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	3332      	adds	r3, #50	; 0x32
 8002f98:	4a09      	ldr	r2, [pc, #36]	; (8002fc0 <UART_SetConfig+0x6f4>)
 8002f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	f003 020f 	and.w	r2, r3, #15
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4442      	add	r2, r8
 8002faa:	609a      	str	r2, [r3, #8]
}
 8002fac:	e7ff      	b.n	8002fae <UART_SetConfig+0x6e2>
 8002fae:	bf00      	nop
 8002fb0:	3714      	adds	r7, #20
 8002fb2:	46bd      	mov	sp, r7
 8002fb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002fb8:	40011000 	.word	0x40011000
 8002fbc:	40011400 	.word	0x40011400
 8002fc0:	51eb851f 	.word	0x51eb851f

08002fc4 <__errno>:
 8002fc4:	4b01      	ldr	r3, [pc, #4]	; (8002fcc <__errno+0x8>)
 8002fc6:	6818      	ldr	r0, [r3, #0]
 8002fc8:	4770      	bx	lr
 8002fca:	bf00      	nop
 8002fcc:	20000014 	.word	0x20000014

08002fd0 <__libc_init_array>:
 8002fd0:	b570      	push	{r4, r5, r6, lr}
 8002fd2:	4e0d      	ldr	r6, [pc, #52]	; (8003008 <__libc_init_array+0x38>)
 8002fd4:	4c0d      	ldr	r4, [pc, #52]	; (800300c <__libc_init_array+0x3c>)
 8002fd6:	1ba4      	subs	r4, r4, r6
 8002fd8:	10a4      	asrs	r4, r4, #2
 8002fda:	2500      	movs	r5, #0
 8002fdc:	42a5      	cmp	r5, r4
 8002fde:	d109      	bne.n	8002ff4 <__libc_init_array+0x24>
 8002fe0:	4e0b      	ldr	r6, [pc, #44]	; (8003010 <__libc_init_array+0x40>)
 8002fe2:	4c0c      	ldr	r4, [pc, #48]	; (8003014 <__libc_init_array+0x44>)
 8002fe4:	f000 fc26 	bl	8003834 <_init>
 8002fe8:	1ba4      	subs	r4, r4, r6
 8002fea:	10a4      	asrs	r4, r4, #2
 8002fec:	2500      	movs	r5, #0
 8002fee:	42a5      	cmp	r5, r4
 8002ff0:	d105      	bne.n	8002ffe <__libc_init_array+0x2e>
 8002ff2:	bd70      	pop	{r4, r5, r6, pc}
 8002ff4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002ff8:	4798      	blx	r3
 8002ffa:	3501      	adds	r5, #1
 8002ffc:	e7ee      	b.n	8002fdc <__libc_init_array+0xc>
 8002ffe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003002:	4798      	blx	r3
 8003004:	3501      	adds	r5, #1
 8003006:	e7f2      	b.n	8002fee <__libc_init_array+0x1e>
 8003008:	08003b10 	.word	0x08003b10
 800300c:	08003b10 	.word	0x08003b10
 8003010:	08003b10 	.word	0x08003b10
 8003014:	08003b14 	.word	0x08003b14

08003018 <memset>:
 8003018:	4402      	add	r2, r0
 800301a:	4603      	mov	r3, r0
 800301c:	4293      	cmp	r3, r2
 800301e:	d100      	bne.n	8003022 <memset+0xa>
 8003020:	4770      	bx	lr
 8003022:	f803 1b01 	strb.w	r1, [r3], #1
 8003026:	e7f9      	b.n	800301c <memset+0x4>

08003028 <_vsiprintf_r>:
 8003028:	b500      	push	{lr}
 800302a:	b09b      	sub	sp, #108	; 0x6c
 800302c:	9100      	str	r1, [sp, #0]
 800302e:	9104      	str	r1, [sp, #16]
 8003030:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003034:	9105      	str	r1, [sp, #20]
 8003036:	9102      	str	r1, [sp, #8]
 8003038:	4905      	ldr	r1, [pc, #20]	; (8003050 <_vsiprintf_r+0x28>)
 800303a:	9103      	str	r1, [sp, #12]
 800303c:	4669      	mov	r1, sp
 800303e:	f000 f86d 	bl	800311c <_svfiprintf_r>
 8003042:	9b00      	ldr	r3, [sp, #0]
 8003044:	2200      	movs	r2, #0
 8003046:	701a      	strb	r2, [r3, #0]
 8003048:	b01b      	add	sp, #108	; 0x6c
 800304a:	f85d fb04 	ldr.w	pc, [sp], #4
 800304e:	bf00      	nop
 8003050:	ffff0208 	.word	0xffff0208

08003054 <vsiprintf>:
 8003054:	4613      	mov	r3, r2
 8003056:	460a      	mov	r2, r1
 8003058:	4601      	mov	r1, r0
 800305a:	4802      	ldr	r0, [pc, #8]	; (8003064 <vsiprintf+0x10>)
 800305c:	6800      	ldr	r0, [r0, #0]
 800305e:	f7ff bfe3 	b.w	8003028 <_vsiprintf_r>
 8003062:	bf00      	nop
 8003064:	20000014 	.word	0x20000014

08003068 <__ssputs_r>:
 8003068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800306c:	688e      	ldr	r6, [r1, #8]
 800306e:	429e      	cmp	r6, r3
 8003070:	4682      	mov	sl, r0
 8003072:	460c      	mov	r4, r1
 8003074:	4690      	mov	r8, r2
 8003076:	4699      	mov	r9, r3
 8003078:	d837      	bhi.n	80030ea <__ssputs_r+0x82>
 800307a:	898a      	ldrh	r2, [r1, #12]
 800307c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003080:	d031      	beq.n	80030e6 <__ssputs_r+0x7e>
 8003082:	6825      	ldr	r5, [r4, #0]
 8003084:	6909      	ldr	r1, [r1, #16]
 8003086:	1a6f      	subs	r7, r5, r1
 8003088:	6965      	ldr	r5, [r4, #20]
 800308a:	2302      	movs	r3, #2
 800308c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003090:	fb95 f5f3 	sdiv	r5, r5, r3
 8003094:	f109 0301 	add.w	r3, r9, #1
 8003098:	443b      	add	r3, r7
 800309a:	429d      	cmp	r5, r3
 800309c:	bf38      	it	cc
 800309e:	461d      	movcc	r5, r3
 80030a0:	0553      	lsls	r3, r2, #21
 80030a2:	d530      	bpl.n	8003106 <__ssputs_r+0x9e>
 80030a4:	4629      	mov	r1, r5
 80030a6:	f000 fb2b 	bl	8003700 <_malloc_r>
 80030aa:	4606      	mov	r6, r0
 80030ac:	b950      	cbnz	r0, 80030c4 <__ssputs_r+0x5c>
 80030ae:	230c      	movs	r3, #12
 80030b0:	f8ca 3000 	str.w	r3, [sl]
 80030b4:	89a3      	ldrh	r3, [r4, #12]
 80030b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80030ba:	81a3      	strh	r3, [r4, #12]
 80030bc:	f04f 30ff 	mov.w	r0, #4294967295
 80030c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80030c4:	463a      	mov	r2, r7
 80030c6:	6921      	ldr	r1, [r4, #16]
 80030c8:	f000 faa8 	bl	800361c <memcpy>
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80030d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030d6:	81a3      	strh	r3, [r4, #12]
 80030d8:	6126      	str	r6, [r4, #16]
 80030da:	6165      	str	r5, [r4, #20]
 80030dc:	443e      	add	r6, r7
 80030de:	1bed      	subs	r5, r5, r7
 80030e0:	6026      	str	r6, [r4, #0]
 80030e2:	60a5      	str	r5, [r4, #8]
 80030e4:	464e      	mov	r6, r9
 80030e6:	454e      	cmp	r6, r9
 80030e8:	d900      	bls.n	80030ec <__ssputs_r+0x84>
 80030ea:	464e      	mov	r6, r9
 80030ec:	4632      	mov	r2, r6
 80030ee:	4641      	mov	r1, r8
 80030f0:	6820      	ldr	r0, [r4, #0]
 80030f2:	f000 fa9e 	bl	8003632 <memmove>
 80030f6:	68a3      	ldr	r3, [r4, #8]
 80030f8:	1b9b      	subs	r3, r3, r6
 80030fa:	60a3      	str	r3, [r4, #8]
 80030fc:	6823      	ldr	r3, [r4, #0]
 80030fe:	441e      	add	r6, r3
 8003100:	6026      	str	r6, [r4, #0]
 8003102:	2000      	movs	r0, #0
 8003104:	e7dc      	b.n	80030c0 <__ssputs_r+0x58>
 8003106:	462a      	mov	r2, r5
 8003108:	f000 fb54 	bl	80037b4 <_realloc_r>
 800310c:	4606      	mov	r6, r0
 800310e:	2800      	cmp	r0, #0
 8003110:	d1e2      	bne.n	80030d8 <__ssputs_r+0x70>
 8003112:	6921      	ldr	r1, [r4, #16]
 8003114:	4650      	mov	r0, sl
 8003116:	f000 faa5 	bl	8003664 <_free_r>
 800311a:	e7c8      	b.n	80030ae <__ssputs_r+0x46>

0800311c <_svfiprintf_r>:
 800311c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003120:	461d      	mov	r5, r3
 8003122:	898b      	ldrh	r3, [r1, #12]
 8003124:	061f      	lsls	r7, r3, #24
 8003126:	b09d      	sub	sp, #116	; 0x74
 8003128:	4680      	mov	r8, r0
 800312a:	460c      	mov	r4, r1
 800312c:	4616      	mov	r6, r2
 800312e:	d50f      	bpl.n	8003150 <_svfiprintf_r+0x34>
 8003130:	690b      	ldr	r3, [r1, #16]
 8003132:	b96b      	cbnz	r3, 8003150 <_svfiprintf_r+0x34>
 8003134:	2140      	movs	r1, #64	; 0x40
 8003136:	f000 fae3 	bl	8003700 <_malloc_r>
 800313a:	6020      	str	r0, [r4, #0]
 800313c:	6120      	str	r0, [r4, #16]
 800313e:	b928      	cbnz	r0, 800314c <_svfiprintf_r+0x30>
 8003140:	230c      	movs	r3, #12
 8003142:	f8c8 3000 	str.w	r3, [r8]
 8003146:	f04f 30ff 	mov.w	r0, #4294967295
 800314a:	e0c8      	b.n	80032de <_svfiprintf_r+0x1c2>
 800314c:	2340      	movs	r3, #64	; 0x40
 800314e:	6163      	str	r3, [r4, #20]
 8003150:	2300      	movs	r3, #0
 8003152:	9309      	str	r3, [sp, #36]	; 0x24
 8003154:	2320      	movs	r3, #32
 8003156:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800315a:	2330      	movs	r3, #48	; 0x30
 800315c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003160:	9503      	str	r5, [sp, #12]
 8003162:	f04f 0b01 	mov.w	fp, #1
 8003166:	4637      	mov	r7, r6
 8003168:	463d      	mov	r5, r7
 800316a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800316e:	b10b      	cbz	r3, 8003174 <_svfiprintf_r+0x58>
 8003170:	2b25      	cmp	r3, #37	; 0x25
 8003172:	d13e      	bne.n	80031f2 <_svfiprintf_r+0xd6>
 8003174:	ebb7 0a06 	subs.w	sl, r7, r6
 8003178:	d00b      	beq.n	8003192 <_svfiprintf_r+0x76>
 800317a:	4653      	mov	r3, sl
 800317c:	4632      	mov	r2, r6
 800317e:	4621      	mov	r1, r4
 8003180:	4640      	mov	r0, r8
 8003182:	f7ff ff71 	bl	8003068 <__ssputs_r>
 8003186:	3001      	adds	r0, #1
 8003188:	f000 80a4 	beq.w	80032d4 <_svfiprintf_r+0x1b8>
 800318c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800318e:	4453      	add	r3, sl
 8003190:	9309      	str	r3, [sp, #36]	; 0x24
 8003192:	783b      	ldrb	r3, [r7, #0]
 8003194:	2b00      	cmp	r3, #0
 8003196:	f000 809d 	beq.w	80032d4 <_svfiprintf_r+0x1b8>
 800319a:	2300      	movs	r3, #0
 800319c:	f04f 32ff 	mov.w	r2, #4294967295
 80031a0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80031a4:	9304      	str	r3, [sp, #16]
 80031a6:	9307      	str	r3, [sp, #28]
 80031a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80031ac:	931a      	str	r3, [sp, #104]	; 0x68
 80031ae:	462f      	mov	r7, r5
 80031b0:	2205      	movs	r2, #5
 80031b2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80031b6:	4850      	ldr	r0, [pc, #320]	; (80032f8 <_svfiprintf_r+0x1dc>)
 80031b8:	f7fd f812 	bl	80001e0 <memchr>
 80031bc:	9b04      	ldr	r3, [sp, #16]
 80031be:	b9d0      	cbnz	r0, 80031f6 <_svfiprintf_r+0xda>
 80031c0:	06d9      	lsls	r1, r3, #27
 80031c2:	bf44      	itt	mi
 80031c4:	2220      	movmi	r2, #32
 80031c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031ca:	071a      	lsls	r2, r3, #28
 80031cc:	bf44      	itt	mi
 80031ce:	222b      	movmi	r2, #43	; 0x2b
 80031d0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031d4:	782a      	ldrb	r2, [r5, #0]
 80031d6:	2a2a      	cmp	r2, #42	; 0x2a
 80031d8:	d015      	beq.n	8003206 <_svfiprintf_r+0xea>
 80031da:	9a07      	ldr	r2, [sp, #28]
 80031dc:	462f      	mov	r7, r5
 80031de:	2000      	movs	r0, #0
 80031e0:	250a      	movs	r5, #10
 80031e2:	4639      	mov	r1, r7
 80031e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031e8:	3b30      	subs	r3, #48	; 0x30
 80031ea:	2b09      	cmp	r3, #9
 80031ec:	d94d      	bls.n	800328a <_svfiprintf_r+0x16e>
 80031ee:	b1b8      	cbz	r0, 8003220 <_svfiprintf_r+0x104>
 80031f0:	e00f      	b.n	8003212 <_svfiprintf_r+0xf6>
 80031f2:	462f      	mov	r7, r5
 80031f4:	e7b8      	b.n	8003168 <_svfiprintf_r+0x4c>
 80031f6:	4a40      	ldr	r2, [pc, #256]	; (80032f8 <_svfiprintf_r+0x1dc>)
 80031f8:	1a80      	subs	r0, r0, r2
 80031fa:	fa0b f000 	lsl.w	r0, fp, r0
 80031fe:	4318      	orrs	r0, r3
 8003200:	9004      	str	r0, [sp, #16]
 8003202:	463d      	mov	r5, r7
 8003204:	e7d3      	b.n	80031ae <_svfiprintf_r+0x92>
 8003206:	9a03      	ldr	r2, [sp, #12]
 8003208:	1d11      	adds	r1, r2, #4
 800320a:	6812      	ldr	r2, [r2, #0]
 800320c:	9103      	str	r1, [sp, #12]
 800320e:	2a00      	cmp	r2, #0
 8003210:	db01      	blt.n	8003216 <_svfiprintf_r+0xfa>
 8003212:	9207      	str	r2, [sp, #28]
 8003214:	e004      	b.n	8003220 <_svfiprintf_r+0x104>
 8003216:	4252      	negs	r2, r2
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	9207      	str	r2, [sp, #28]
 800321e:	9304      	str	r3, [sp, #16]
 8003220:	783b      	ldrb	r3, [r7, #0]
 8003222:	2b2e      	cmp	r3, #46	; 0x2e
 8003224:	d10c      	bne.n	8003240 <_svfiprintf_r+0x124>
 8003226:	787b      	ldrb	r3, [r7, #1]
 8003228:	2b2a      	cmp	r3, #42	; 0x2a
 800322a:	d133      	bne.n	8003294 <_svfiprintf_r+0x178>
 800322c:	9b03      	ldr	r3, [sp, #12]
 800322e:	1d1a      	adds	r2, r3, #4
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	9203      	str	r2, [sp, #12]
 8003234:	2b00      	cmp	r3, #0
 8003236:	bfb8      	it	lt
 8003238:	f04f 33ff 	movlt.w	r3, #4294967295
 800323c:	3702      	adds	r7, #2
 800323e:	9305      	str	r3, [sp, #20]
 8003240:	4d2e      	ldr	r5, [pc, #184]	; (80032fc <_svfiprintf_r+0x1e0>)
 8003242:	7839      	ldrb	r1, [r7, #0]
 8003244:	2203      	movs	r2, #3
 8003246:	4628      	mov	r0, r5
 8003248:	f7fc ffca 	bl	80001e0 <memchr>
 800324c:	b138      	cbz	r0, 800325e <_svfiprintf_r+0x142>
 800324e:	2340      	movs	r3, #64	; 0x40
 8003250:	1b40      	subs	r0, r0, r5
 8003252:	fa03 f000 	lsl.w	r0, r3, r0
 8003256:	9b04      	ldr	r3, [sp, #16]
 8003258:	4303      	orrs	r3, r0
 800325a:	3701      	adds	r7, #1
 800325c:	9304      	str	r3, [sp, #16]
 800325e:	7839      	ldrb	r1, [r7, #0]
 8003260:	4827      	ldr	r0, [pc, #156]	; (8003300 <_svfiprintf_r+0x1e4>)
 8003262:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003266:	2206      	movs	r2, #6
 8003268:	1c7e      	adds	r6, r7, #1
 800326a:	f7fc ffb9 	bl	80001e0 <memchr>
 800326e:	2800      	cmp	r0, #0
 8003270:	d038      	beq.n	80032e4 <_svfiprintf_r+0x1c8>
 8003272:	4b24      	ldr	r3, [pc, #144]	; (8003304 <_svfiprintf_r+0x1e8>)
 8003274:	bb13      	cbnz	r3, 80032bc <_svfiprintf_r+0x1a0>
 8003276:	9b03      	ldr	r3, [sp, #12]
 8003278:	3307      	adds	r3, #7
 800327a:	f023 0307 	bic.w	r3, r3, #7
 800327e:	3308      	adds	r3, #8
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003284:	444b      	add	r3, r9
 8003286:	9309      	str	r3, [sp, #36]	; 0x24
 8003288:	e76d      	b.n	8003166 <_svfiprintf_r+0x4a>
 800328a:	fb05 3202 	mla	r2, r5, r2, r3
 800328e:	2001      	movs	r0, #1
 8003290:	460f      	mov	r7, r1
 8003292:	e7a6      	b.n	80031e2 <_svfiprintf_r+0xc6>
 8003294:	2300      	movs	r3, #0
 8003296:	3701      	adds	r7, #1
 8003298:	9305      	str	r3, [sp, #20]
 800329a:	4619      	mov	r1, r3
 800329c:	250a      	movs	r5, #10
 800329e:	4638      	mov	r0, r7
 80032a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032a4:	3a30      	subs	r2, #48	; 0x30
 80032a6:	2a09      	cmp	r2, #9
 80032a8:	d903      	bls.n	80032b2 <_svfiprintf_r+0x196>
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0c8      	beq.n	8003240 <_svfiprintf_r+0x124>
 80032ae:	9105      	str	r1, [sp, #20]
 80032b0:	e7c6      	b.n	8003240 <_svfiprintf_r+0x124>
 80032b2:	fb05 2101 	mla	r1, r5, r1, r2
 80032b6:	2301      	movs	r3, #1
 80032b8:	4607      	mov	r7, r0
 80032ba:	e7f0      	b.n	800329e <_svfiprintf_r+0x182>
 80032bc:	ab03      	add	r3, sp, #12
 80032be:	9300      	str	r3, [sp, #0]
 80032c0:	4622      	mov	r2, r4
 80032c2:	4b11      	ldr	r3, [pc, #68]	; (8003308 <_svfiprintf_r+0x1ec>)
 80032c4:	a904      	add	r1, sp, #16
 80032c6:	4640      	mov	r0, r8
 80032c8:	f3af 8000 	nop.w
 80032cc:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032d0:	4681      	mov	r9, r0
 80032d2:	d1d6      	bne.n	8003282 <_svfiprintf_r+0x166>
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	065b      	lsls	r3, r3, #25
 80032d8:	f53f af35 	bmi.w	8003146 <_svfiprintf_r+0x2a>
 80032dc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032de:	b01d      	add	sp, #116	; 0x74
 80032e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032e4:	ab03      	add	r3, sp, #12
 80032e6:	9300      	str	r3, [sp, #0]
 80032e8:	4622      	mov	r2, r4
 80032ea:	4b07      	ldr	r3, [pc, #28]	; (8003308 <_svfiprintf_r+0x1ec>)
 80032ec:	a904      	add	r1, sp, #16
 80032ee:	4640      	mov	r0, r8
 80032f0:	f000 f882 	bl	80033f8 <_printf_i>
 80032f4:	e7ea      	b.n	80032cc <_svfiprintf_r+0x1b0>
 80032f6:	bf00      	nop
 80032f8:	08003ad4 	.word	0x08003ad4
 80032fc:	08003ada 	.word	0x08003ada
 8003300:	08003ade 	.word	0x08003ade
 8003304:	00000000 	.word	0x00000000
 8003308:	08003069 	.word	0x08003069

0800330c <_printf_common>:
 800330c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003310:	4691      	mov	r9, r2
 8003312:	461f      	mov	r7, r3
 8003314:	688a      	ldr	r2, [r1, #8]
 8003316:	690b      	ldr	r3, [r1, #16]
 8003318:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800331c:	4293      	cmp	r3, r2
 800331e:	bfb8      	it	lt
 8003320:	4613      	movlt	r3, r2
 8003322:	f8c9 3000 	str.w	r3, [r9]
 8003326:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800332a:	4606      	mov	r6, r0
 800332c:	460c      	mov	r4, r1
 800332e:	b112      	cbz	r2, 8003336 <_printf_common+0x2a>
 8003330:	3301      	adds	r3, #1
 8003332:	f8c9 3000 	str.w	r3, [r9]
 8003336:	6823      	ldr	r3, [r4, #0]
 8003338:	0699      	lsls	r1, r3, #26
 800333a:	bf42      	ittt	mi
 800333c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003340:	3302      	addmi	r3, #2
 8003342:	f8c9 3000 	strmi.w	r3, [r9]
 8003346:	6825      	ldr	r5, [r4, #0]
 8003348:	f015 0506 	ands.w	r5, r5, #6
 800334c:	d107      	bne.n	800335e <_printf_common+0x52>
 800334e:	f104 0a19 	add.w	sl, r4, #25
 8003352:	68e3      	ldr	r3, [r4, #12]
 8003354:	f8d9 2000 	ldr.w	r2, [r9]
 8003358:	1a9b      	subs	r3, r3, r2
 800335a:	42ab      	cmp	r3, r5
 800335c:	dc28      	bgt.n	80033b0 <_printf_common+0xa4>
 800335e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003362:	6822      	ldr	r2, [r4, #0]
 8003364:	3300      	adds	r3, #0
 8003366:	bf18      	it	ne
 8003368:	2301      	movne	r3, #1
 800336a:	0692      	lsls	r2, r2, #26
 800336c:	d42d      	bmi.n	80033ca <_printf_common+0xbe>
 800336e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003372:	4639      	mov	r1, r7
 8003374:	4630      	mov	r0, r6
 8003376:	47c0      	blx	r8
 8003378:	3001      	adds	r0, #1
 800337a:	d020      	beq.n	80033be <_printf_common+0xb2>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	68e5      	ldr	r5, [r4, #12]
 8003380:	f8d9 2000 	ldr.w	r2, [r9]
 8003384:	f003 0306 	and.w	r3, r3, #6
 8003388:	2b04      	cmp	r3, #4
 800338a:	bf08      	it	eq
 800338c:	1aad      	subeq	r5, r5, r2
 800338e:	68a3      	ldr	r3, [r4, #8]
 8003390:	6922      	ldr	r2, [r4, #16]
 8003392:	bf0c      	ite	eq
 8003394:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003398:	2500      	movne	r5, #0
 800339a:	4293      	cmp	r3, r2
 800339c:	bfc4      	itt	gt
 800339e:	1a9b      	subgt	r3, r3, r2
 80033a0:	18ed      	addgt	r5, r5, r3
 80033a2:	f04f 0900 	mov.w	r9, #0
 80033a6:	341a      	adds	r4, #26
 80033a8:	454d      	cmp	r5, r9
 80033aa:	d11a      	bne.n	80033e2 <_printf_common+0xd6>
 80033ac:	2000      	movs	r0, #0
 80033ae:	e008      	b.n	80033c2 <_printf_common+0xb6>
 80033b0:	2301      	movs	r3, #1
 80033b2:	4652      	mov	r2, sl
 80033b4:	4639      	mov	r1, r7
 80033b6:	4630      	mov	r0, r6
 80033b8:	47c0      	blx	r8
 80033ba:	3001      	adds	r0, #1
 80033bc:	d103      	bne.n	80033c6 <_printf_common+0xba>
 80033be:	f04f 30ff 	mov.w	r0, #4294967295
 80033c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c6:	3501      	adds	r5, #1
 80033c8:	e7c3      	b.n	8003352 <_printf_common+0x46>
 80033ca:	18e1      	adds	r1, r4, r3
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	2030      	movs	r0, #48	; 0x30
 80033d0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033d4:	4422      	add	r2, r4
 80033d6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033da:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033de:	3302      	adds	r3, #2
 80033e0:	e7c5      	b.n	800336e <_printf_common+0x62>
 80033e2:	2301      	movs	r3, #1
 80033e4:	4622      	mov	r2, r4
 80033e6:	4639      	mov	r1, r7
 80033e8:	4630      	mov	r0, r6
 80033ea:	47c0      	blx	r8
 80033ec:	3001      	adds	r0, #1
 80033ee:	d0e6      	beq.n	80033be <_printf_common+0xb2>
 80033f0:	f109 0901 	add.w	r9, r9, #1
 80033f4:	e7d8      	b.n	80033a8 <_printf_common+0x9c>
	...

080033f8 <_printf_i>:
 80033f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033fc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003400:	460c      	mov	r4, r1
 8003402:	7e09      	ldrb	r1, [r1, #24]
 8003404:	b085      	sub	sp, #20
 8003406:	296e      	cmp	r1, #110	; 0x6e
 8003408:	4617      	mov	r7, r2
 800340a:	4606      	mov	r6, r0
 800340c:	4698      	mov	r8, r3
 800340e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003410:	f000 80b3 	beq.w	800357a <_printf_i+0x182>
 8003414:	d822      	bhi.n	800345c <_printf_i+0x64>
 8003416:	2963      	cmp	r1, #99	; 0x63
 8003418:	d036      	beq.n	8003488 <_printf_i+0x90>
 800341a:	d80a      	bhi.n	8003432 <_printf_i+0x3a>
 800341c:	2900      	cmp	r1, #0
 800341e:	f000 80b9 	beq.w	8003594 <_printf_i+0x19c>
 8003422:	2958      	cmp	r1, #88	; 0x58
 8003424:	f000 8083 	beq.w	800352e <_printf_i+0x136>
 8003428:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800342c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003430:	e032      	b.n	8003498 <_printf_i+0xa0>
 8003432:	2964      	cmp	r1, #100	; 0x64
 8003434:	d001      	beq.n	800343a <_printf_i+0x42>
 8003436:	2969      	cmp	r1, #105	; 0x69
 8003438:	d1f6      	bne.n	8003428 <_printf_i+0x30>
 800343a:	6820      	ldr	r0, [r4, #0]
 800343c:	6813      	ldr	r3, [r2, #0]
 800343e:	0605      	lsls	r5, r0, #24
 8003440:	f103 0104 	add.w	r1, r3, #4
 8003444:	d52a      	bpl.n	800349c <_printf_i+0xa4>
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6011      	str	r1, [r2, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	da03      	bge.n	8003456 <_printf_i+0x5e>
 800344e:	222d      	movs	r2, #45	; 0x2d
 8003450:	425b      	negs	r3, r3
 8003452:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003456:	486f      	ldr	r0, [pc, #444]	; (8003614 <_printf_i+0x21c>)
 8003458:	220a      	movs	r2, #10
 800345a:	e039      	b.n	80034d0 <_printf_i+0xd8>
 800345c:	2973      	cmp	r1, #115	; 0x73
 800345e:	f000 809d 	beq.w	800359c <_printf_i+0x1a4>
 8003462:	d808      	bhi.n	8003476 <_printf_i+0x7e>
 8003464:	296f      	cmp	r1, #111	; 0x6f
 8003466:	d020      	beq.n	80034aa <_printf_i+0xb2>
 8003468:	2970      	cmp	r1, #112	; 0x70
 800346a:	d1dd      	bne.n	8003428 <_printf_i+0x30>
 800346c:	6823      	ldr	r3, [r4, #0]
 800346e:	f043 0320 	orr.w	r3, r3, #32
 8003472:	6023      	str	r3, [r4, #0]
 8003474:	e003      	b.n	800347e <_printf_i+0x86>
 8003476:	2975      	cmp	r1, #117	; 0x75
 8003478:	d017      	beq.n	80034aa <_printf_i+0xb2>
 800347a:	2978      	cmp	r1, #120	; 0x78
 800347c:	d1d4      	bne.n	8003428 <_printf_i+0x30>
 800347e:	2378      	movs	r3, #120	; 0x78
 8003480:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003484:	4864      	ldr	r0, [pc, #400]	; (8003618 <_printf_i+0x220>)
 8003486:	e055      	b.n	8003534 <_printf_i+0x13c>
 8003488:	6813      	ldr	r3, [r2, #0]
 800348a:	1d19      	adds	r1, r3, #4
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	6011      	str	r1, [r2, #0]
 8003490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003494:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003498:	2301      	movs	r3, #1
 800349a:	e08c      	b.n	80035b6 <_printf_i+0x1be>
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	6011      	str	r1, [r2, #0]
 80034a0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034a4:	bf18      	it	ne
 80034a6:	b21b      	sxthne	r3, r3
 80034a8:	e7cf      	b.n	800344a <_printf_i+0x52>
 80034aa:	6813      	ldr	r3, [r2, #0]
 80034ac:	6825      	ldr	r5, [r4, #0]
 80034ae:	1d18      	adds	r0, r3, #4
 80034b0:	6010      	str	r0, [r2, #0]
 80034b2:	0628      	lsls	r0, r5, #24
 80034b4:	d501      	bpl.n	80034ba <_printf_i+0xc2>
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	e002      	b.n	80034c0 <_printf_i+0xc8>
 80034ba:	0668      	lsls	r0, r5, #25
 80034bc:	d5fb      	bpl.n	80034b6 <_printf_i+0xbe>
 80034be:	881b      	ldrh	r3, [r3, #0]
 80034c0:	4854      	ldr	r0, [pc, #336]	; (8003614 <_printf_i+0x21c>)
 80034c2:	296f      	cmp	r1, #111	; 0x6f
 80034c4:	bf14      	ite	ne
 80034c6:	220a      	movne	r2, #10
 80034c8:	2208      	moveq	r2, #8
 80034ca:	2100      	movs	r1, #0
 80034cc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034d0:	6865      	ldr	r5, [r4, #4]
 80034d2:	60a5      	str	r5, [r4, #8]
 80034d4:	2d00      	cmp	r5, #0
 80034d6:	f2c0 8095 	blt.w	8003604 <_printf_i+0x20c>
 80034da:	6821      	ldr	r1, [r4, #0]
 80034dc:	f021 0104 	bic.w	r1, r1, #4
 80034e0:	6021      	str	r1, [r4, #0]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d13d      	bne.n	8003562 <_printf_i+0x16a>
 80034e6:	2d00      	cmp	r5, #0
 80034e8:	f040 808e 	bne.w	8003608 <_printf_i+0x210>
 80034ec:	4665      	mov	r5, ip
 80034ee:	2a08      	cmp	r2, #8
 80034f0:	d10b      	bne.n	800350a <_printf_i+0x112>
 80034f2:	6823      	ldr	r3, [r4, #0]
 80034f4:	07db      	lsls	r3, r3, #31
 80034f6:	d508      	bpl.n	800350a <_printf_i+0x112>
 80034f8:	6923      	ldr	r3, [r4, #16]
 80034fa:	6862      	ldr	r2, [r4, #4]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	bfde      	ittt	le
 8003500:	2330      	movle	r3, #48	; 0x30
 8003502:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003506:	f105 35ff 	addle.w	r5, r5, #4294967295
 800350a:	ebac 0305 	sub.w	r3, ip, r5
 800350e:	6123      	str	r3, [r4, #16]
 8003510:	f8cd 8000 	str.w	r8, [sp]
 8003514:	463b      	mov	r3, r7
 8003516:	aa03      	add	r2, sp, #12
 8003518:	4621      	mov	r1, r4
 800351a:	4630      	mov	r0, r6
 800351c:	f7ff fef6 	bl	800330c <_printf_common>
 8003520:	3001      	adds	r0, #1
 8003522:	d14d      	bne.n	80035c0 <_printf_i+0x1c8>
 8003524:	f04f 30ff 	mov.w	r0, #4294967295
 8003528:	b005      	add	sp, #20
 800352a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800352e:	4839      	ldr	r0, [pc, #228]	; (8003614 <_printf_i+0x21c>)
 8003530:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003534:	6813      	ldr	r3, [r2, #0]
 8003536:	6821      	ldr	r1, [r4, #0]
 8003538:	1d1d      	adds	r5, r3, #4
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	6015      	str	r5, [r2, #0]
 800353e:	060a      	lsls	r2, r1, #24
 8003540:	d50b      	bpl.n	800355a <_printf_i+0x162>
 8003542:	07ca      	lsls	r2, r1, #31
 8003544:	bf44      	itt	mi
 8003546:	f041 0120 	orrmi.w	r1, r1, #32
 800354a:	6021      	strmi	r1, [r4, #0]
 800354c:	b91b      	cbnz	r3, 8003556 <_printf_i+0x15e>
 800354e:	6822      	ldr	r2, [r4, #0]
 8003550:	f022 0220 	bic.w	r2, r2, #32
 8003554:	6022      	str	r2, [r4, #0]
 8003556:	2210      	movs	r2, #16
 8003558:	e7b7      	b.n	80034ca <_printf_i+0xd2>
 800355a:	064d      	lsls	r5, r1, #25
 800355c:	bf48      	it	mi
 800355e:	b29b      	uxthmi	r3, r3
 8003560:	e7ef      	b.n	8003542 <_printf_i+0x14a>
 8003562:	4665      	mov	r5, ip
 8003564:	fbb3 f1f2 	udiv	r1, r3, r2
 8003568:	fb02 3311 	mls	r3, r2, r1, r3
 800356c:	5cc3      	ldrb	r3, [r0, r3]
 800356e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003572:	460b      	mov	r3, r1
 8003574:	2900      	cmp	r1, #0
 8003576:	d1f5      	bne.n	8003564 <_printf_i+0x16c>
 8003578:	e7b9      	b.n	80034ee <_printf_i+0xf6>
 800357a:	6813      	ldr	r3, [r2, #0]
 800357c:	6825      	ldr	r5, [r4, #0]
 800357e:	6961      	ldr	r1, [r4, #20]
 8003580:	1d18      	adds	r0, r3, #4
 8003582:	6010      	str	r0, [r2, #0]
 8003584:	0628      	lsls	r0, r5, #24
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	d501      	bpl.n	800358e <_printf_i+0x196>
 800358a:	6019      	str	r1, [r3, #0]
 800358c:	e002      	b.n	8003594 <_printf_i+0x19c>
 800358e:	066a      	lsls	r2, r5, #25
 8003590:	d5fb      	bpl.n	800358a <_printf_i+0x192>
 8003592:	8019      	strh	r1, [r3, #0]
 8003594:	2300      	movs	r3, #0
 8003596:	6123      	str	r3, [r4, #16]
 8003598:	4665      	mov	r5, ip
 800359a:	e7b9      	b.n	8003510 <_printf_i+0x118>
 800359c:	6813      	ldr	r3, [r2, #0]
 800359e:	1d19      	adds	r1, r3, #4
 80035a0:	6011      	str	r1, [r2, #0]
 80035a2:	681d      	ldr	r5, [r3, #0]
 80035a4:	6862      	ldr	r2, [r4, #4]
 80035a6:	2100      	movs	r1, #0
 80035a8:	4628      	mov	r0, r5
 80035aa:	f7fc fe19 	bl	80001e0 <memchr>
 80035ae:	b108      	cbz	r0, 80035b4 <_printf_i+0x1bc>
 80035b0:	1b40      	subs	r0, r0, r5
 80035b2:	6060      	str	r0, [r4, #4]
 80035b4:	6863      	ldr	r3, [r4, #4]
 80035b6:	6123      	str	r3, [r4, #16]
 80035b8:	2300      	movs	r3, #0
 80035ba:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035be:	e7a7      	b.n	8003510 <_printf_i+0x118>
 80035c0:	6923      	ldr	r3, [r4, #16]
 80035c2:	462a      	mov	r2, r5
 80035c4:	4639      	mov	r1, r7
 80035c6:	4630      	mov	r0, r6
 80035c8:	47c0      	blx	r8
 80035ca:	3001      	adds	r0, #1
 80035cc:	d0aa      	beq.n	8003524 <_printf_i+0x12c>
 80035ce:	6823      	ldr	r3, [r4, #0]
 80035d0:	079b      	lsls	r3, r3, #30
 80035d2:	d413      	bmi.n	80035fc <_printf_i+0x204>
 80035d4:	68e0      	ldr	r0, [r4, #12]
 80035d6:	9b03      	ldr	r3, [sp, #12]
 80035d8:	4298      	cmp	r0, r3
 80035da:	bfb8      	it	lt
 80035dc:	4618      	movlt	r0, r3
 80035de:	e7a3      	b.n	8003528 <_printf_i+0x130>
 80035e0:	2301      	movs	r3, #1
 80035e2:	464a      	mov	r2, r9
 80035e4:	4639      	mov	r1, r7
 80035e6:	4630      	mov	r0, r6
 80035e8:	47c0      	blx	r8
 80035ea:	3001      	adds	r0, #1
 80035ec:	d09a      	beq.n	8003524 <_printf_i+0x12c>
 80035ee:	3501      	adds	r5, #1
 80035f0:	68e3      	ldr	r3, [r4, #12]
 80035f2:	9a03      	ldr	r2, [sp, #12]
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	42ab      	cmp	r3, r5
 80035f8:	dcf2      	bgt.n	80035e0 <_printf_i+0x1e8>
 80035fa:	e7eb      	b.n	80035d4 <_printf_i+0x1dc>
 80035fc:	2500      	movs	r5, #0
 80035fe:	f104 0919 	add.w	r9, r4, #25
 8003602:	e7f5      	b.n	80035f0 <_printf_i+0x1f8>
 8003604:	2b00      	cmp	r3, #0
 8003606:	d1ac      	bne.n	8003562 <_printf_i+0x16a>
 8003608:	7803      	ldrb	r3, [r0, #0]
 800360a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800360e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003612:	e76c      	b.n	80034ee <_printf_i+0xf6>
 8003614:	08003ae5 	.word	0x08003ae5
 8003618:	08003af6 	.word	0x08003af6

0800361c <memcpy>:
 800361c:	b510      	push	{r4, lr}
 800361e:	1e43      	subs	r3, r0, #1
 8003620:	440a      	add	r2, r1
 8003622:	4291      	cmp	r1, r2
 8003624:	d100      	bne.n	8003628 <memcpy+0xc>
 8003626:	bd10      	pop	{r4, pc}
 8003628:	f811 4b01 	ldrb.w	r4, [r1], #1
 800362c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003630:	e7f7      	b.n	8003622 <memcpy+0x6>

08003632 <memmove>:
 8003632:	4288      	cmp	r0, r1
 8003634:	b510      	push	{r4, lr}
 8003636:	eb01 0302 	add.w	r3, r1, r2
 800363a:	d807      	bhi.n	800364c <memmove+0x1a>
 800363c:	1e42      	subs	r2, r0, #1
 800363e:	4299      	cmp	r1, r3
 8003640:	d00a      	beq.n	8003658 <memmove+0x26>
 8003642:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003646:	f802 4f01 	strb.w	r4, [r2, #1]!
 800364a:	e7f8      	b.n	800363e <memmove+0xc>
 800364c:	4283      	cmp	r3, r0
 800364e:	d9f5      	bls.n	800363c <memmove+0xa>
 8003650:	1881      	adds	r1, r0, r2
 8003652:	1ad2      	subs	r2, r2, r3
 8003654:	42d3      	cmn	r3, r2
 8003656:	d100      	bne.n	800365a <memmove+0x28>
 8003658:	bd10      	pop	{r4, pc}
 800365a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800365e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003662:	e7f7      	b.n	8003654 <memmove+0x22>

08003664 <_free_r>:
 8003664:	b538      	push	{r3, r4, r5, lr}
 8003666:	4605      	mov	r5, r0
 8003668:	2900      	cmp	r1, #0
 800366a:	d045      	beq.n	80036f8 <_free_r+0x94>
 800366c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003670:	1f0c      	subs	r4, r1, #4
 8003672:	2b00      	cmp	r3, #0
 8003674:	bfb8      	it	lt
 8003676:	18e4      	addlt	r4, r4, r3
 8003678:	f000 f8d2 	bl	8003820 <__malloc_lock>
 800367c:	4a1f      	ldr	r2, [pc, #124]	; (80036fc <_free_r+0x98>)
 800367e:	6813      	ldr	r3, [r2, #0]
 8003680:	4610      	mov	r0, r2
 8003682:	b933      	cbnz	r3, 8003692 <_free_r+0x2e>
 8003684:	6063      	str	r3, [r4, #4]
 8003686:	6014      	str	r4, [r2, #0]
 8003688:	4628      	mov	r0, r5
 800368a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800368e:	f000 b8c8 	b.w	8003822 <__malloc_unlock>
 8003692:	42a3      	cmp	r3, r4
 8003694:	d90c      	bls.n	80036b0 <_free_r+0x4c>
 8003696:	6821      	ldr	r1, [r4, #0]
 8003698:	1862      	adds	r2, r4, r1
 800369a:	4293      	cmp	r3, r2
 800369c:	bf04      	itt	eq
 800369e:	681a      	ldreq	r2, [r3, #0]
 80036a0:	685b      	ldreq	r3, [r3, #4]
 80036a2:	6063      	str	r3, [r4, #4]
 80036a4:	bf04      	itt	eq
 80036a6:	1852      	addeq	r2, r2, r1
 80036a8:	6022      	streq	r2, [r4, #0]
 80036aa:	6004      	str	r4, [r0, #0]
 80036ac:	e7ec      	b.n	8003688 <_free_r+0x24>
 80036ae:	4613      	mov	r3, r2
 80036b0:	685a      	ldr	r2, [r3, #4]
 80036b2:	b10a      	cbz	r2, 80036b8 <_free_r+0x54>
 80036b4:	42a2      	cmp	r2, r4
 80036b6:	d9fa      	bls.n	80036ae <_free_r+0x4a>
 80036b8:	6819      	ldr	r1, [r3, #0]
 80036ba:	1858      	adds	r0, r3, r1
 80036bc:	42a0      	cmp	r0, r4
 80036be:	d10b      	bne.n	80036d8 <_free_r+0x74>
 80036c0:	6820      	ldr	r0, [r4, #0]
 80036c2:	4401      	add	r1, r0
 80036c4:	1858      	adds	r0, r3, r1
 80036c6:	4282      	cmp	r2, r0
 80036c8:	6019      	str	r1, [r3, #0]
 80036ca:	d1dd      	bne.n	8003688 <_free_r+0x24>
 80036cc:	6810      	ldr	r0, [r2, #0]
 80036ce:	6852      	ldr	r2, [r2, #4]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	4401      	add	r1, r0
 80036d4:	6019      	str	r1, [r3, #0]
 80036d6:	e7d7      	b.n	8003688 <_free_r+0x24>
 80036d8:	d902      	bls.n	80036e0 <_free_r+0x7c>
 80036da:	230c      	movs	r3, #12
 80036dc:	602b      	str	r3, [r5, #0]
 80036de:	e7d3      	b.n	8003688 <_free_r+0x24>
 80036e0:	6820      	ldr	r0, [r4, #0]
 80036e2:	1821      	adds	r1, r4, r0
 80036e4:	428a      	cmp	r2, r1
 80036e6:	bf04      	itt	eq
 80036e8:	6811      	ldreq	r1, [r2, #0]
 80036ea:	6852      	ldreq	r2, [r2, #4]
 80036ec:	6062      	str	r2, [r4, #4]
 80036ee:	bf04      	itt	eq
 80036f0:	1809      	addeq	r1, r1, r0
 80036f2:	6021      	streq	r1, [r4, #0]
 80036f4:	605c      	str	r4, [r3, #4]
 80036f6:	e7c7      	b.n	8003688 <_free_r+0x24>
 80036f8:	bd38      	pop	{r3, r4, r5, pc}
 80036fa:	bf00      	nop
 80036fc:	200000b4 	.word	0x200000b4

08003700 <_malloc_r>:
 8003700:	b570      	push	{r4, r5, r6, lr}
 8003702:	1ccd      	adds	r5, r1, #3
 8003704:	f025 0503 	bic.w	r5, r5, #3
 8003708:	3508      	adds	r5, #8
 800370a:	2d0c      	cmp	r5, #12
 800370c:	bf38      	it	cc
 800370e:	250c      	movcc	r5, #12
 8003710:	2d00      	cmp	r5, #0
 8003712:	4606      	mov	r6, r0
 8003714:	db01      	blt.n	800371a <_malloc_r+0x1a>
 8003716:	42a9      	cmp	r1, r5
 8003718:	d903      	bls.n	8003722 <_malloc_r+0x22>
 800371a:	230c      	movs	r3, #12
 800371c:	6033      	str	r3, [r6, #0]
 800371e:	2000      	movs	r0, #0
 8003720:	bd70      	pop	{r4, r5, r6, pc}
 8003722:	f000 f87d 	bl	8003820 <__malloc_lock>
 8003726:	4a21      	ldr	r2, [pc, #132]	; (80037ac <_malloc_r+0xac>)
 8003728:	6814      	ldr	r4, [r2, #0]
 800372a:	4621      	mov	r1, r4
 800372c:	b991      	cbnz	r1, 8003754 <_malloc_r+0x54>
 800372e:	4c20      	ldr	r4, [pc, #128]	; (80037b0 <_malloc_r+0xb0>)
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	b91b      	cbnz	r3, 800373c <_malloc_r+0x3c>
 8003734:	4630      	mov	r0, r6
 8003736:	f000 f863 	bl	8003800 <_sbrk_r>
 800373a:	6020      	str	r0, [r4, #0]
 800373c:	4629      	mov	r1, r5
 800373e:	4630      	mov	r0, r6
 8003740:	f000 f85e 	bl	8003800 <_sbrk_r>
 8003744:	1c43      	adds	r3, r0, #1
 8003746:	d124      	bne.n	8003792 <_malloc_r+0x92>
 8003748:	230c      	movs	r3, #12
 800374a:	6033      	str	r3, [r6, #0]
 800374c:	4630      	mov	r0, r6
 800374e:	f000 f868 	bl	8003822 <__malloc_unlock>
 8003752:	e7e4      	b.n	800371e <_malloc_r+0x1e>
 8003754:	680b      	ldr	r3, [r1, #0]
 8003756:	1b5b      	subs	r3, r3, r5
 8003758:	d418      	bmi.n	800378c <_malloc_r+0x8c>
 800375a:	2b0b      	cmp	r3, #11
 800375c:	d90f      	bls.n	800377e <_malloc_r+0x7e>
 800375e:	600b      	str	r3, [r1, #0]
 8003760:	50cd      	str	r5, [r1, r3]
 8003762:	18cc      	adds	r4, r1, r3
 8003764:	4630      	mov	r0, r6
 8003766:	f000 f85c 	bl	8003822 <__malloc_unlock>
 800376a:	f104 000b 	add.w	r0, r4, #11
 800376e:	1d23      	adds	r3, r4, #4
 8003770:	f020 0007 	bic.w	r0, r0, #7
 8003774:	1ac3      	subs	r3, r0, r3
 8003776:	d0d3      	beq.n	8003720 <_malloc_r+0x20>
 8003778:	425a      	negs	r2, r3
 800377a:	50e2      	str	r2, [r4, r3]
 800377c:	e7d0      	b.n	8003720 <_malloc_r+0x20>
 800377e:	428c      	cmp	r4, r1
 8003780:	684b      	ldr	r3, [r1, #4]
 8003782:	bf16      	itet	ne
 8003784:	6063      	strne	r3, [r4, #4]
 8003786:	6013      	streq	r3, [r2, #0]
 8003788:	460c      	movne	r4, r1
 800378a:	e7eb      	b.n	8003764 <_malloc_r+0x64>
 800378c:	460c      	mov	r4, r1
 800378e:	6849      	ldr	r1, [r1, #4]
 8003790:	e7cc      	b.n	800372c <_malloc_r+0x2c>
 8003792:	1cc4      	adds	r4, r0, #3
 8003794:	f024 0403 	bic.w	r4, r4, #3
 8003798:	42a0      	cmp	r0, r4
 800379a:	d005      	beq.n	80037a8 <_malloc_r+0xa8>
 800379c:	1a21      	subs	r1, r4, r0
 800379e:	4630      	mov	r0, r6
 80037a0:	f000 f82e 	bl	8003800 <_sbrk_r>
 80037a4:	3001      	adds	r0, #1
 80037a6:	d0cf      	beq.n	8003748 <_malloc_r+0x48>
 80037a8:	6025      	str	r5, [r4, #0]
 80037aa:	e7db      	b.n	8003764 <_malloc_r+0x64>
 80037ac:	200000b4 	.word	0x200000b4
 80037b0:	200000b8 	.word	0x200000b8

080037b4 <_realloc_r>:
 80037b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037b6:	4607      	mov	r7, r0
 80037b8:	4614      	mov	r4, r2
 80037ba:	460e      	mov	r6, r1
 80037bc:	b921      	cbnz	r1, 80037c8 <_realloc_r+0x14>
 80037be:	4611      	mov	r1, r2
 80037c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80037c4:	f7ff bf9c 	b.w	8003700 <_malloc_r>
 80037c8:	b922      	cbnz	r2, 80037d4 <_realloc_r+0x20>
 80037ca:	f7ff ff4b 	bl	8003664 <_free_r>
 80037ce:	4625      	mov	r5, r4
 80037d0:	4628      	mov	r0, r5
 80037d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037d4:	f000 f826 	bl	8003824 <_malloc_usable_size_r>
 80037d8:	42a0      	cmp	r0, r4
 80037da:	d20f      	bcs.n	80037fc <_realloc_r+0x48>
 80037dc:	4621      	mov	r1, r4
 80037de:	4638      	mov	r0, r7
 80037e0:	f7ff ff8e 	bl	8003700 <_malloc_r>
 80037e4:	4605      	mov	r5, r0
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d0f2      	beq.n	80037d0 <_realloc_r+0x1c>
 80037ea:	4631      	mov	r1, r6
 80037ec:	4622      	mov	r2, r4
 80037ee:	f7ff ff15 	bl	800361c <memcpy>
 80037f2:	4631      	mov	r1, r6
 80037f4:	4638      	mov	r0, r7
 80037f6:	f7ff ff35 	bl	8003664 <_free_r>
 80037fa:	e7e9      	b.n	80037d0 <_realloc_r+0x1c>
 80037fc:	4635      	mov	r5, r6
 80037fe:	e7e7      	b.n	80037d0 <_realloc_r+0x1c>

08003800 <_sbrk_r>:
 8003800:	b538      	push	{r3, r4, r5, lr}
 8003802:	4c06      	ldr	r4, [pc, #24]	; (800381c <_sbrk_r+0x1c>)
 8003804:	2300      	movs	r3, #0
 8003806:	4605      	mov	r5, r0
 8003808:	4608      	mov	r0, r1
 800380a:	6023      	str	r3, [r4, #0]
 800380c:	f7fd fb4e 	bl	8000eac <_sbrk>
 8003810:	1c43      	adds	r3, r0, #1
 8003812:	d102      	bne.n	800381a <_sbrk_r+0x1a>
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	b103      	cbz	r3, 800381a <_sbrk_r+0x1a>
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	bd38      	pop	{r3, r4, r5, pc}
 800381c:	20002878 	.word	0x20002878

08003820 <__malloc_lock>:
 8003820:	4770      	bx	lr

08003822 <__malloc_unlock>:
 8003822:	4770      	bx	lr

08003824 <_malloc_usable_size_r>:
 8003824:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003828:	1f18      	subs	r0, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	bfbc      	itt	lt
 800382e:	580b      	ldrlt	r3, [r1, r0]
 8003830:	18c0      	addlt	r0, r0, r3
 8003832:	4770      	bx	lr

08003834 <_init>:
 8003834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003836:	bf00      	nop
 8003838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800383a:	bc08      	pop	{r3}
 800383c:	469e      	mov	lr, r3
 800383e:	4770      	bx	lr

08003840 <_fini>:
 8003840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003842:	bf00      	nop
 8003844:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003846:	bc08      	pop	{r3}
 8003848:	469e      	mov	lr, r3
 800384a:	4770      	bx	lr
